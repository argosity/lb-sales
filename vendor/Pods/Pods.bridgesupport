<?xml version='1.0'?>
<signatures version='1.0'>
<struct name='HTreeGroup' type='{HuffmanTree=&quot;root_&quot;^{_HuffmanTreeNode=&quot;symbol_&quot;i&quot;children_&quot;i}&quot;max_nodes_&quot;i&quot;num_nodes_&quot;i}'>
<field name='htrees_' type='[5{HuffmanTree=&quot;root_&quot;^{_HuffmanTreeNode=&quot;symbol_&quot;i&quot;children_&quot;i}&quot;max_nodes_&quot;i&quot;num_nodes_&quot;i}' declared_type='HuffmanTree*'/>
</struct>
<struct name='HuffmanTree' type='{HuffmanTree=&quot;root_&quot;^{_HuffmanTreeNode=&quot;symbol_&quot;i&quot;children_&quot;i}&quot;max_nodes_&quot;i&quot;num_nodes_&quot;i}'>
<field name='root_' type='^{_HuffmanTreeNode=&quot;symbol_&quot;i&quot;children_&quot;i}' declared_type='HuffmanTreeNode*'/>
<field name='max_nodes_' type='i' declared_type='int'/>
<field name='num_nodes_' type='i' declared_type='int'/>
</struct>
<struct name='HuffmanTreeNode' type='{_HuffmanTreeNode=&quot;symbol_&quot;i&quot;children_&quot;i}'>
<field name='symbol_' type='i' declared_type='int'/>
<field name='children_' type='i' declared_type='int'/>
</struct>
<struct name='VP8BitReader' type='{VP8BitReader=&quot;buf_&quot;*&quot;buf_end_&quot;*&quot;eof_&quot;i&quot;range_&quot;I&quot;value_&quot;I&quot;bits_&quot;i}'>
<field const='true' name='buf_' type='*' declared_type='uint8_t*'/>
<field const='true' name='buf_end_' type='*' declared_type='uint8_t*'/>
<field name='eof_' type='i' declared_type='int'/>
<field name='range_' type='I' declared_type='range_t'/>
<field name='value_' type='I' declared_type='bit_t'/>
<field name='bits_' type='i' declared_type='int'/>
</struct>
<struct name='VP8Decoder' type='{_VP8FInfo=&quot;f_level_&quot;b6&quot;f_ilevel_&quot;b6&quot;f_inner_&quot;b1}'>
<field name='status_' type='i' declared_type='VP8StatusCode'/>
<field name='ready_' type='i' declared_type='int'/>
<field const='true' name='error_msg_' type='*' declared_type='char*'/>
<field name='br_' type='{VP8BitReader=&quot;buf_&quot;*&quot;buf_end_&quot;*&quot;eof_&quot;i&quot;range_&quot;I&quot;value_&quot;I&quot;bits_&quot;i}' declared_type='VP8BitReader'/>
<field name='frm_hdr_' type='{_VP8FrameHeader=&quot;key_frame_&quot;C&quot;profile_&quot;C&quot;show_&quot;C&quot;partition_length_&quot;I}' declared_type='VP8FrameHeader'/>
<field name='pic_hdr_' type='{_VP8PictureHeader=&quot;width_&quot;S&quot;height_&quot;S&quot;xscale_&quot;C&quot;yscale_&quot;C&quot;colorspace_&quot;C&quot;clamp_type_&quot;C}' declared_type='VP8PictureHeader'/>
<field name='filter_hdr_' type='{_VP8FilterHeader=&quot;simple_&quot;i&quot;level_&quot;i&quot;sharpness_&quot;i&quot;use_lf_delta_&quot;i&quot;ref_lf_delta_&quot;[4i]&quot;mode_lf_delta_&quot;[4i]}' declared_type='VP8FilterHeader'/>
<field name='segment_hdr_' type='{_VP8SegmentHeader=&quot;use_segment_&quot;i&quot;update_map_&quot;i&quot;absolute_delta_&quot;i&quot;quantizer_&quot;[4c]&quot;filter_strength_&quot;[4c]}' declared_type='VP8SegmentHeader'/>
<field name='worker_' type='{_WebPWorker=&quot;status_&quot;i&quot;hook&quot;^?&quot;data1&quot;^v&quot;data2&quot;^v&quot;had_error&quot;i}' declared_type='WebPWorker'/>
<field name='use_threads_' type='i' declared_type='int'/>
<field name='cache_id_' type='i' declared_type='int'/>
<field name='num_caches_' type='i' declared_type='int'/>
<field name='thread_ctx_' type='{_VP8ThreadContext=&quot;id_&quot;i&quot;mb_y_&quot;i&quot;filter_row_&quot;i&quot;f_info_&quot;^{_VP8FInfo=&quot;f_level_&quot;b6&quot;f_ilevel_&quot;b6&quot;f_inner_&quot;b1}&quot;io_&quot;{VP8Io=&quot;width&quot;i&quot;height&quot;i&quot;mb_y&quot;i&quot;mb_w&quot;i&quot;mb_h&quot;i&quot;y&quot;*&quot;u&quot;*&quot;v&quot;*&quot;y_stride&quot;i&quot;uv_stride&quot;i&quot;opaque&quot;^v&quot;put&quot;^?&quot;setup&quot;^?&quot;teardown&quot;^?&quot;fancy_upsampling&quot;i&quot;data_size&quot;I&quot;data&quot;*&quot;bypass_filtering&quot;i&quot;use_cropping&quot;i&quot;crop_left&quot;i&quot;crop_right&quot;i&quot;crop_top&quot;i&quot;crop_bottom&quot;i&quot;use_scaling&quot;i&quot;scaled_width&quot;i&quot;scaled_height&quot;i&quot;a&quot;*}}' declared_type='VP8ThreadContext'/>
<field name='mb_w_' type='i' declared_type='int'/>
<field name='mb_h_' type='i' declared_type='int'/>
<field name='tl_mb_x_' type='i' declared_type='int'/>
<field name='tl_mb_y_' type='i' declared_type='int'/>
<field name='br_mb_x_' type='i' declared_type='int'/>
<field name='br_mb_y_' type='i' declared_type='int'/>
<field name='num_parts_' type='i' declared_type='int'/>
<field name='parts_' type='[8{VP8BitReader=&quot;buf_&quot;*&quot;buf_end_&quot;*&quot;eof_&quot;i&quot;range_&quot;I&quot;value_&quot;I&quot;bits_&quot;i}' declared_type='VP8BitReader*'/>
<field name='buffer_flags_' type='I' declared_type='uint32_t'/>
<field name='dqm_' type='[4{_VP8QuantMatrix=&quot;y1_mat_&quot;[2i]&quot;y2_mat_&quot;[2i]&quot;uv_mat_&quot;[2i]}' declared_type='VP8QuantMatrix*'/>
<field name='proba_' type='{_VP8Proba=&quot;segments_&quot;[3C]&quot;coeffs_&quot;[4[8[3[11C]]]]}' declared_type='VP8Proba'/>
<field name='use_skip_proba_' type='i' declared_type='int'/>
<field name='skip_p_' type='C' declared_type='uint8_t'/>
<field name='intra_t_' type='*' declared_type='uint8_t*'/>
<field name='intra_l_' type='[4C]' declared_type='uint8_t*'/>
<field name='y_t_' type='*' declared_type='uint8_t*'/>
<field name='u_t_' type='*' declared_type='uint8_t*'/>
<field name='v_t_' type='*' declared_type='uint8_t*'/>
<field name='mb_info_' type='^{_VP8MB=&quot;nz_&quot;b24&quot;dc_nz_&quot;b1&quot;skip_&quot;b1}' declared_type='VP8MB*'/>
<field name='f_info_' type='^{_VP8FInfo=&quot;f_level_&quot;b6&quot;f_ilevel_&quot;b6&quot;f_inner_&quot;b1}' declared_type='VP8FInfo*'/>
<field name='yuv_b_' type='*' declared_type='uint8_t*'/>
<field name='coeffs_' type='^s' declared_type='int16_t*'/>
<field name='cache_y_' type='*' declared_type='uint8_t*'/>
<field name='cache_u_' type='*' declared_type='uint8_t*'/>
<field name='cache_v_' type='*' declared_type='uint8_t*'/>
<field name='cache_y_stride_' type='i' declared_type='int'/>
<field name='cache_uv_stride_' type='i' declared_type='int'/>
<field name='mem_' type='^v' declared_type='void*'/>
<field name='mem_size_' type='L' declared_type='size_t'/>
<field name='mb_x_' type='i' declared_type='int'/>
<field name='mb_y_' type='i' declared_type='int'/>
<field name='is_i4x4_' type='C' declared_type='uint8_t'/>
<field name='imodes_' type='[16C]' declared_type='uint8_t*'/>
<field name='uvmode_' type='C' declared_type='uint8_t'/>
<field name='segment_' type='C' declared_type='uint8_t'/>
<field name='non_zero_' type='I' declared_type='uint32_t'/>
<field name='non_zero_ac_' type='I' declared_type='uint32_t'/>
<field name='filter_type_' type='i' declared_type='int'/>
<field name='filter_row_' type='i' declared_type='int'/>
<field name='fstrengths_' type='[4[2{?=&quot;f_level_&quot;b6&quot;f_ilevel_&quot;b6&quot;f_inner_&quot;b1}]]' declared_type='VP8FInfo**'/>
<field const='true' name='alpha_data_' type='*' declared_type='uint8_t*'/>
<field name='alpha_data_size_' type='L' declared_type='size_t'/>
<field name='alpha_plane_' type='*' declared_type='uint8_t*'/>
<field name='layer_colorspace_' type='i' declared_type='int'/>
<field const='true' name='layer_data_' type='*' declared_type='uint8_t*'/>
<field name='layer_data_size_' type='L' declared_type='size_t'/>
</struct>
<struct name='VP8FInfo' type='{_VP8FInfo=&quot;f_level_&quot;b6&quot;f_ilevel_&quot;b6&quot;f_inner_&quot;b1}'>
<field name='f_level_' type='b6' declared_type='unsigned int'/>
<field name='f_ilevel_' type='b6' declared_type='unsigned int'/>
<field name='f_inner_' type='b1' declared_type='unsigned int'/>
</struct>
<struct name='VP8FilterHeader' type='{_VP8FilterHeader=&quot;simple_&quot;i&quot;level_&quot;i&quot;sharpness_&quot;i&quot;use_lf_delta_&quot;i&quot;ref_lf_delta_&quot;[4i]&quot;mode_lf_delta_&quot;[4i]}'>
<field name='simple_' type='i' declared_type='int'/>
<field name='level_' type='i' declared_type='int'/>
<field name='sharpness_' type='i' declared_type='int'/>
<field name='use_lf_delta_' type='i' declared_type='int'/>
<field name='ref_lf_delta_' type='[4i]' declared_type='int*'/>
<field name='mode_lf_delta_' type='[4i]' declared_type='int*'/>
</struct>
<struct name='VP8FrameHeader' type='{_VP8FrameHeader=&quot;key_frame_&quot;C&quot;profile_&quot;C&quot;show_&quot;C&quot;partition_length_&quot;I}'>
<field name='key_frame_' type='C' declared_type='uint8_t'/>
<field name='profile_' type='C' declared_type='uint8_t'/>
<field name='show_' type='C' declared_type='uint8_t'/>
<field name='partition_length_' type='I' declared_type='uint32_t'/>
</struct>
<struct name='VP8Io' type='{VP8Io=&quot;width&quot;i&quot;height&quot;i&quot;mb_y&quot;i&quot;mb_w&quot;i&quot;mb_h&quot;i&quot;y&quot;*&quot;u&quot;*&quot;v&quot;*&quot;y_stride&quot;i&quot;uv_stride&quot;i&quot;opaque&quot;^v&quot;put&quot;^?&quot;setup&quot;^?&quot;teardown&quot;^?&quot;fancy_upsampling&quot;i&quot;data_size&quot;I&quot;data&quot;*&quot;bypass_filtering&quot;i&quot;use_cropping&quot;i&quot;crop_left&quot;i&quot;crop_right&quot;i&quot;crop_top&quot;i&quot;crop_bottom&quot;i&quot;use_scaling&quot;i&quot;scaled_width&quot;i&quot;scaled_height&quot;i&quot;a&quot;*}'>
<field name='width' type='i' declared_type='int'/>
<field name='height' type='i' declared_type='int'/>
<field name='mb_y' type='i' declared_type='int'/>
<field name='mb_w' type='i' declared_type='int'/>
<field name='mb_h' type='i' declared_type='int'/>
<field const='true' name='y' type='*' declared_type='uint8_t*'/>
<field const='true' name='u' type='*' declared_type='uint8_t*'/>
<field const='true' name='v' type='*' declared_type='uint8_t*'/>
<field name='y_stride' type='i' declared_type='int'/>
<field name='uv_stride' type='i' declared_type='int'/>
<field name='opaque' type='^v' declared_type='void*'/>
<field name='put' type='^?' declared_type='VP8IoPutHook' function_pointer='true'>
<arg const='true' type='^{VP8Io=iiiii***ii^v^?^?^?iI*iiiiiiiii*}' declared_type='VP8Io*'/>
<retval type='i' declared_type='int'/>
</field>
<field name='setup' type='^?' declared_type='VP8IoSetupHook' function_pointer='true'>
<arg type='^{VP8Io=iiiii***ii^v^?^?^?iI*iiiiiiiii*}' declared_type='VP8Io*'/>
<retval type='i' declared_type='int'/>
</field>
<field name='teardown' type='^?' declared_type='VP8IoTeardownHook' function_pointer='true'>
<arg const='true' type='^{VP8Io=iiiii***ii^v^?^?^?iI*iiiiiiiii*}' declared_type='VP8Io*'/>
<retval type='v' declared_type='void'/>
</field>
<field name='fancy_upsampling' type='i' declared_type='int'/>
<field name='data_size' type='L' declared_type='size_t'/>
<field const='true' name='data' type='*' declared_type='uint8_t*'/>
<field name='bypass_filtering' type='i' declared_type='int'/>
<field name='use_cropping' type='i' declared_type='int'/>
<field name='crop_left' type='i' declared_type='int'/>
<field name='crop_right' type='i' declared_type='int'/>
<field name='crop_top' type='i' declared_type='int'/>
<field name='crop_bottom' type='i' declared_type='int'/>
<field name='use_scaling' type='i' declared_type='int'/>
<field name='scaled_width' type='i' declared_type='int'/>
<field name='scaled_height' type='i' declared_type='int'/>
<field const='true' name='a' type='*' declared_type='uint8_t*'/>
</struct>
<struct name='VP8LBitReader' type='{_VP8LBitReader=&quot;val_&quot;Q&quot;buf_&quot;*&quot;len_&quot;I&quot;pos_&quot;I&quot;bit_pos_&quot;i&quot;eos_&quot;i&quot;error_&quot;i}'>
<field name='val_' type='Q' declared_type='vp8l_val_t'/>
<field const='true' name='buf_' type='*' declared_type='uint8_t*'/>
<field name='len_' type='L' declared_type='size_t'/>
<field name='pos_' type='L' declared_type='size_t'/>
<field name='bit_pos_' type='i' declared_type='int'/>
<field name='eos_' type='i' declared_type='int'/>
<field name='error_' type='i' declared_type='int'/>
</struct>
<struct name='VP8LColorCache' type='{_VP8LColorCache=&quot;colors_&quot;^I&quot;hash_shift_&quot;i}'>
<field name='colors_' type='^I' declared_type='uint32_t*'/>
<field name='hash_shift_' type='i' declared_type='int'/>
</struct>
<struct name='VP8LDecoder' type='{_WebPRescaler=&quot;x_expand&quot;i&quot;num_channels&quot;i&quot;fy_scale&quot;i&quot;fx_scale&quot;i&quot;fxy_scale&quot;q&quot;y_accum&quot;i&quot;y_add&quot;i&quot;y_sub&quot;i&quot;x_add&quot;i&quot;x_sub&quot;i&quot;src_width&quot;i&quot;src_height&quot;i&quot;dst_width&quot;i&quot;dst_height&quot;i&quot;dst&quot;*&quot;dst_stride&quot;i&quot;irow&quot;^i&quot;frow&quot;^i}'>
<field name='status_' type='i' declared_type='VP8StatusCode'/>
<field name='action_' type='i' declared_type='VP8LDecodeState'/>
<field name='state_' type='i' declared_type='VP8LDecodeState'/>
<field name='io_' type='^{VP8Io=&quot;width&quot;i&quot;height&quot;i&quot;mb_y&quot;i&quot;mb_w&quot;i&quot;mb_h&quot;i&quot;y&quot;*&quot;u&quot;*&quot;v&quot;*&quot;y_stride&quot;i&quot;uv_stride&quot;i&quot;opaque&quot;^v&quot;put&quot;^?&quot;setup&quot;^?&quot;teardown&quot;^?&quot;fancy_upsampling&quot;i&quot;data_size&quot;I&quot;data&quot;*&quot;bypass_filtering&quot;i&quot;use_cropping&quot;i&quot;crop_left&quot;i&quot;crop_right&quot;i&quot;crop_top&quot;i&quot;crop_bottom&quot;i&quot;use_scaling&quot;i&quot;scaled_width&quot;i&quot;scaled_height&quot;i&quot;a&quot;*}' declared_type='VP8Io*'/>
<field const='true' name='output_' type='^{WebPDecBuffer=&quot;colorspace&quot;i&quot;width&quot;i&quot;height&quot;i&quot;is_external_memory&quot;i&quot;u&quot;(?=&quot;RGBA&quot;{WebPRGBABuffer=&quot;rgba&quot;*&quot;stride&quot;i&quot;size&quot;I}&quot;YUVA&quot;{WebPYUVABuffer=&quot;y&quot;*&quot;u&quot;*&quot;v&quot;*&quot;a&quot;*&quot;y_stride&quot;i&quot;u_stride&quot;i&quot;v_stride&quot;i&quot;a_stride&quot;i&quot;y_size&quot;I&quot;u_size&quot;I&quot;v_size&quot;I&quot;a_size&quot;I})&quot;pad&quot;[4I]&quot;private_memory&quot;*}' declared_type='WebPDecBuffer*'/>
<field name='argb_' type='^I' declared_type='uint32_t*'/>
<field name='argb_cache_' type='^I' declared_type='uint32_t*'/>
<field name='br_' type='{_VP8LBitReader=&quot;val_&quot;Q&quot;buf_&quot;*&quot;len_&quot;I&quot;pos_&quot;I&quot;bit_pos_&quot;i&quot;eos_&quot;i&quot;error_&quot;i}' declared_type='VP8LBitReader'/>
<field name='width_' type='i' declared_type='int'/>
<field name='height_' type='i' declared_type='int'/>
<field name='last_row_' type='i' declared_type='int'/>
<field name='last_out_row_' type='i' declared_type='int'/>
<field name='hdr_' type='{_VP8LMetadata=&quot;color_cache_size_&quot;i&quot;color_cache_&quot;{_VP8LColorCache=&quot;colors_&quot;^I&quot;hash_shift_&quot;i}&quot;huffman_mask_&quot;i&quot;huffman_subsample_bits_&quot;i&quot;huffman_xsize_&quot;i&quot;huffman_image_&quot;^I&quot;num_htree_groups_&quot;i&quot;htree_groups_&quot;^{HuffmanTree=&quot;root_&quot;^{_HuffmanTreeNode=&quot;symbol_&quot;i&quot;children_&quot;i}&quot;max_nodes_&quot;i&quot;num_nodes_&quot;i}}' declared_type='VP8LMetadata'/>
<field name='next_transform_' type='i' declared_type='int'/>
<field name='transforms_' type='[4{VP8LTransform=&quot;type_&quot;i&quot;bits_&quot;i&quot;xsize_&quot;i&quot;ysize_&quot;i&quot;data_&quot;^I}' declared_type='VP8LTransform*'/>
<field name='transforms_seen_' type='I' declared_type='uint32_t'/>
<field name='rescaler_memory' type='*' declared_type='uint8_t*'/>
<field name='rescaler' type='^{_WebPRescaler=&quot;x_expand&quot;i&quot;num_channels&quot;i&quot;fy_scale&quot;i&quot;fx_scale&quot;i&quot;fxy_scale&quot;q&quot;y_accum&quot;i&quot;y_add&quot;i&quot;y_sub&quot;i&quot;x_add&quot;i&quot;x_sub&quot;i&quot;src_width&quot;i&quot;src_height&quot;i&quot;dst_width&quot;i&quot;dst_height&quot;i&quot;dst&quot;*&quot;dst_stride&quot;i&quot;irow&quot;^i&quot;frow&quot;^i}' declared_type='WebPRescaler*'/>
</struct>
<struct name='VP8LMetadata' type='{_VP8LMetadata=&quot;color_cache_size_&quot;i&quot;color_cache_&quot;{_VP8LColorCache=&quot;colors_&quot;^I&quot;hash_shift_&quot;i}&quot;huffman_mask_&quot;i&quot;huffman_subsample_bits_&quot;i&quot;huffman_xsize_&quot;i&quot;huffman_image_&quot;^I&quot;num_htree_groups_&quot;i&quot;htree_groups_&quot;^{HuffmanTree=&quot;root_&quot;^{_HuffmanTreeNode=&quot;symbol_&quot;i&quot;children_&quot;i}&quot;max_nodes_&quot;i&quot;num_nodes_&quot;i}}'>
<field name='color_cache_size_' type='i' declared_type='int'/>
<field name='color_cache_' type='{_VP8LColorCache=&quot;colors_&quot;^I&quot;hash_shift_&quot;i}' declared_type='VP8LColorCache'/>
<field name='huffman_mask_' type='i' declared_type='int'/>
<field name='huffman_subsample_bits_' type='i' declared_type='int'/>
<field name='huffman_xsize_' type='i' declared_type='int'/>
<field name='huffman_image_' type='^I' declared_type='uint32_t*'/>
<field name='num_htree_groups_' type='i' declared_type='int'/>
<field name='htree_groups_' type='^{HuffmanTree=&quot;root_&quot;^{_HuffmanTreeNode=&quot;symbol_&quot;i&quot;children_&quot;i}&quot;max_nodes_&quot;i&quot;num_nodes_&quot;i}' declared_type='HTreeGroup*'/>
</struct>
<struct name='VP8LTransform' type='{VP8LTransform=&quot;type_&quot;i&quot;bits_&quot;i&quot;xsize_&quot;i&quot;ysize_&quot;i&quot;data_&quot;^I}'>
<field name='type_' type='i' declared_type='VP8LImageTransformType'/>
<field name='bits_' type='i' declared_type='int'/>
<field name='xsize_' type='i' declared_type='int'/>
<field name='ysize_' type='i' declared_type='int'/>
<field name='data_' type='^I' declared_type='uint32_t*'/>
</struct>
<struct name='VP8MB' type='{_VP8MB=&quot;nz_&quot;b24&quot;dc_nz_&quot;b1&quot;skip_&quot;b1}'>
<field name='nz_' type='b24' declared_type='unsigned int'/>
<field name='dc_nz_' type='b1' declared_type='unsigned int'/>
<field name='skip_' type='b1' declared_type='unsigned int'/>
</struct>
<struct name='VP8PictureHeader' type='{_VP8PictureHeader=&quot;width_&quot;S&quot;height_&quot;S&quot;xscale_&quot;C&quot;yscale_&quot;C&quot;colorspace_&quot;C&quot;clamp_type_&quot;C}'>
<field name='width_' type='S' declared_type='uint16_t'/>
<field name='height_' type='S' declared_type='uint16_t'/>
<field name='xscale_' type='C' declared_type='uint8_t'/>
<field name='yscale_' type='C' declared_type='uint8_t'/>
<field name='colorspace_' type='C' declared_type='uint8_t'/>
<field name='clamp_type_' type='C' declared_type='uint8_t'/>
</struct>
<struct name='VP8Proba' type='{_VP8Proba=&quot;segments_&quot;[3C]&quot;coeffs_&quot;[4[8[3[11C]]]]}'>
<field name='segments_' type='[3C]' declared_type='uint8_t*'/>
<field name='coeffs_' type='[4[8[3[11C]]]]' declared_type='uint8_t****'/>
</struct>
<struct name='VP8QuantMatrix' type='{_VP8QuantMatrix=&quot;y1_mat_&quot;[2i]&quot;y2_mat_&quot;[2i]&quot;uv_mat_&quot;[2i]}'>
<field name='y1_mat_' type='[2i]' declared_type='quant_t'/>
<field name='y2_mat_' type='[2i]' declared_type='quant_t'/>
<field name='uv_mat_' type='[2i]' declared_type='quant_t'/>
</struct>
<struct name='VP8SegmentHeader' type='{_VP8SegmentHeader=&quot;use_segment_&quot;i&quot;update_map_&quot;i&quot;absolute_delta_&quot;i&quot;quantizer_&quot;[4c]&quot;filter_strength_&quot;[4c]}'>
<field name='use_segment_' type='i' declared_type='int'/>
<field name='update_map_' type='i' declared_type='int'/>
<field name='absolute_delta_' type='i' declared_type='int'/>
<field name='quantizer_' type='[4c]' declared_type='int8_t*'/>
<field name='filter_strength_' type='[4c]' declared_type='int8_t*'/>
</struct>
<struct name='VP8ThreadContext' type='{_VP8ThreadContext=&quot;id_&quot;i&quot;mb_y_&quot;i&quot;filter_row_&quot;i&quot;f_info_&quot;^{_VP8FInfo=&quot;f_level_&quot;b6&quot;f_ilevel_&quot;b6&quot;f_inner_&quot;b1}&quot;io_&quot;{VP8Io=&quot;width&quot;i&quot;height&quot;i&quot;mb_y&quot;i&quot;mb_w&quot;i&quot;mb_h&quot;i&quot;y&quot;*&quot;u&quot;*&quot;v&quot;*&quot;y_stride&quot;i&quot;uv_stride&quot;i&quot;opaque&quot;^v&quot;put&quot;^?&quot;setup&quot;^?&quot;teardown&quot;^?&quot;fancy_upsampling&quot;i&quot;data_size&quot;I&quot;data&quot;*&quot;bypass_filtering&quot;i&quot;use_cropping&quot;i&quot;crop_left&quot;i&quot;crop_right&quot;i&quot;crop_top&quot;i&quot;crop_bottom&quot;i&quot;use_scaling&quot;i&quot;scaled_width&quot;i&quot;scaled_height&quot;i&quot;a&quot;*}}'>
<field name='id_' type='i' declared_type='int'/>
<field name='mb_y_' type='i' declared_type='int'/>
<field name='filter_row_' type='i' declared_type='int'/>
<field name='f_info_' type='^{_VP8FInfo=&quot;f_level_&quot;b6&quot;f_ilevel_&quot;b6&quot;f_inner_&quot;b1}' declared_type='VP8FInfo*'/>
<field name='io_' type='{VP8Io=&quot;width&quot;i&quot;height&quot;i&quot;mb_y&quot;i&quot;mb_w&quot;i&quot;mb_h&quot;i&quot;y&quot;*&quot;u&quot;*&quot;v&quot;*&quot;y_stride&quot;i&quot;uv_stride&quot;i&quot;opaque&quot;^v&quot;put&quot;^?&quot;setup&quot;^?&quot;teardown&quot;^?&quot;fancy_upsampling&quot;i&quot;data_size&quot;I&quot;data&quot;*&quot;bypass_filtering&quot;i&quot;use_cropping&quot;i&quot;crop_left&quot;i&quot;crop_right&quot;i&quot;crop_top&quot;i&quot;crop_bottom&quot;i&quot;use_scaling&quot;i&quot;scaled_width&quot;i&quot;scaled_height&quot;i&quot;a&quot;*}' declared_type='VP8Io'/>
</struct>
<struct name='WebPBitstreamFeatures' type='{WebPBitstreamFeatures=&quot;width&quot;i&quot;height&quot;i&quot;has_alpha&quot;i&quot;has_animation&quot;i&quot;bitstream_version&quot;i&quot;no_incremental_decoding&quot;i&quot;rotate&quot;i&quot;uv_sampling&quot;i&quot;pad&quot;[2I]}'>
<field name='width' type='i' declared_type='int'/>
<field name='height' type='i' declared_type='int'/>
<field name='has_alpha' type='i' declared_type='int'/>
<field name='has_animation' type='i' declared_type='int'/>
<field name='bitstream_version' type='i' declared_type='int'/>
<field name='no_incremental_decoding' type='i' declared_type='int'/>
<field name='rotate' type='i' declared_type='int'/>
<field name='uv_sampling' type='i' declared_type='int'/>
<field name='pad' type='[2I]' declared_type='uint32_t*'/>
</struct>
<struct name='WebPData' type='{WebPData=&quot;bytes&quot;*&quot;size&quot;I}'>
<field const='true' name='bytes' type='*' declared_type='uint8_t*'/>
<field name='size' type='L' declared_type='size_t'/>
</struct>
<struct name='WebPDecBuffer' type='{WebPDecBuffer=&quot;colorspace&quot;i&quot;width&quot;i&quot;height&quot;i&quot;is_external_memory&quot;i&quot;u&quot;(?=&quot;RGBA&quot;{WebPRGBABuffer=&quot;rgba&quot;*&quot;stride&quot;i&quot;size&quot;I}&quot;YUVA&quot;{WebPYUVABuffer=&quot;y&quot;*&quot;u&quot;*&quot;v&quot;*&quot;a&quot;*&quot;y_stride&quot;i&quot;u_stride&quot;i&quot;v_stride&quot;i&quot;a_stride&quot;i&quot;y_size&quot;I&quot;u_size&quot;I&quot;v_size&quot;I&quot;a_size&quot;I})&quot;pad&quot;[4I]&quot;private_memory&quot;*}'>
<field name='colorspace' type='i' declared_type='WEBP_CSP_MODE'/>
<field name='width' type='i' declared_type='int'/>
<field name='height' type='i' declared_type='int'/>
<field name='is_external_memory' type='i' declared_type='int'/>
<field name='u' type='(?=&quot;RGBA&quot;{WebPRGBABuffer=&quot;rgba&quot;*&quot;stride&quot;i&quot;size&quot;I}&quot;YUVA&quot;{WebPYUVABuffer=&quot;y&quot;*&quot;u&quot;*&quot;v&quot;*&quot;a&quot;*&quot;y_stride&quot;i&quot;u_stride&quot;i&quot;v_stride&quot;i&quot;a_stride&quot;i&quot;y_size&quot;I&quot;u_size&quot;I&quot;v_size&quot;I&quot;a_size&quot;I})' declared_type='union WebPDecBuffer::'/>
<field name='pad' type='[4I]' declared_type='uint32_t*'/>
<field name='private_memory' type='*' declared_type='uint8_t*'/>
</struct>
<struct name='WebPDecParams' type='{WebPDecParams=&quot;output&quot;^{WebPDecBuffer=&quot;colorspace&quot;i&quot;width&quot;i&quot;height&quot;i&quot;is_external_memory&quot;i&quot;u&quot;(?=&quot;RGBA&quot;{WebPRGBABuffer=&quot;rgba&quot;*&quot;stride&quot;i&quot;size&quot;I}&quot;YUVA&quot;{WebPYUVABuffer=&quot;y&quot;*&quot;u&quot;*&quot;v&quot;*&quot;a&quot;*&quot;y_stride&quot;i&quot;u_stride&quot;i&quot;v_stride&quot;i&quot;a_stride&quot;i&quot;y_size&quot;I&quot;u_size&quot;I&quot;v_size&quot;I&quot;a_size&quot;I})&quot;pad&quot;[4I]&quot;private_memory&quot;*}&quot;tmp_y&quot;*&quot;tmp_u&quot;*&quot;tmp_v&quot;*&quot;last_y&quot;i&quot;options&quot;^{WebPDecoderOptions=&quot;bypass_filtering&quot;i&quot;no_fancy_upsampling&quot;i&quot;use_cropping&quot;i&quot;crop_left&quot;i&quot;crop_top&quot;i&quot;crop_width&quot;i&quot;crop_height&quot;i&quot;use_scaling&quot;i&quot;scaled_width&quot;i&quot;scaled_height&quot;i&quot;use_threads&quot;i&quot;force_rotation&quot;i&quot;no_enhancement&quot;i&quot;pad&quot;[6I]}&quot;scaler_y&quot;{_WebPRescaler=&quot;x_expand&quot;i&quot;num_channels&quot;i&quot;fy_scale&quot;i&quot;fx_scale&quot;i&quot;fxy_scale&quot;q&quot;y_accum&quot;i&quot;y_add&quot;i&quot;y_sub&quot;i&quot;x_add&quot;i&quot;x_sub&quot;i&quot;src_width&quot;i&quot;src_height&quot;i&quot;dst_width&quot;i&quot;dst_height&quot;i&quot;dst&quot;*&quot;dst_stride&quot;i&quot;irow&quot;^i&quot;frow&quot;^i}&quot;scaler_u&quot;{_WebPRescaler=&quot;x_expand&quot;i&quot;num_channels&quot;i&quot;fy_scale&quot;i&quot;fx_scale&quot;i&quot;fxy_scale&quot;q&quot;y_accum&quot;i&quot;y_add&quot;i&quot;y_sub&quot;i&quot;x_add&quot;i&quot;x_sub&quot;i&quot;src_width&quot;i&quot;src_height&quot;i&quot;dst_width&quot;i&quot;dst_height&quot;i&quot;dst&quot;*&quot;dst_stride&quot;i&quot;irow&quot;^i&quot;frow&quot;^i}&quot;scaler_v&quot;{_WebPRescaler=&quot;x_expand&quot;i&quot;num_channels&quot;i&quot;fy_scale&quot;i&quot;fx_scale&quot;i&quot;fxy_scale&quot;q&quot;y_accum&quot;i&quot;y_add&quot;i&quot;y_sub&quot;i&quot;x_add&quot;i&quot;x_sub&quot;i&quot;src_width&quot;i&quot;src_height&quot;i&quot;dst_width&quot;i&quot;dst_height&quot;i&quot;dst&quot;*&quot;dst_stride&quot;i&quot;irow&quot;^i&quot;frow&quot;^i}&quot;scaler_a&quot;{_WebPRescaler=&quot;x_expand&quot;i&quot;num_channels&quot;i&quot;fy_scale&quot;i&quot;fx_scale&quot;i&quot;fxy_scale&quot;q&quot;y_accum&quot;i&quot;y_add&quot;i&quot;y_sub&quot;i&quot;x_add&quot;i&quot;x_sub&quot;i&quot;src_width&quot;i&quot;src_height&quot;i&quot;dst_width&quot;i&quot;dst_height&quot;i&quot;dst&quot;*&quot;dst_stride&quot;i&quot;irow&quot;^i&quot;frow&quot;^i}&quot;memory&quot;^v&quot;emit&quot;^?&quot;emit_alpha&quot;^?&quot;emit_alpha_row&quot;^?}'>
<field name='output' type='^{WebPDecBuffer=&quot;colorspace&quot;i&quot;width&quot;i&quot;height&quot;i&quot;is_external_memory&quot;i&quot;u&quot;(?=&quot;RGBA&quot;{WebPRGBABuffer=&quot;rgba&quot;*&quot;stride&quot;i&quot;size&quot;I}&quot;YUVA&quot;{WebPYUVABuffer=&quot;y&quot;*&quot;u&quot;*&quot;v&quot;*&quot;a&quot;*&quot;y_stride&quot;i&quot;u_stride&quot;i&quot;v_stride&quot;i&quot;a_stride&quot;i&quot;y_size&quot;I&quot;u_size&quot;I&quot;v_size&quot;I&quot;a_size&quot;I})&quot;pad&quot;[4I]&quot;private_memory&quot;*}' declared_type='WebPDecBuffer*'/>
<field name='tmp_y' type='*' declared_type='uint8_t*'/>
<field name='tmp_u' type='*' declared_type='uint8_t*'/>
<field name='tmp_v' type='*' declared_type='uint8_t*'/>
<field name='last_y' type='i' declared_type='int'/>
<field const='true' name='options' type='^{WebPDecoderOptions=&quot;bypass_filtering&quot;i&quot;no_fancy_upsampling&quot;i&quot;use_cropping&quot;i&quot;crop_left&quot;i&quot;crop_top&quot;i&quot;crop_width&quot;i&quot;crop_height&quot;i&quot;use_scaling&quot;i&quot;scaled_width&quot;i&quot;scaled_height&quot;i&quot;use_threads&quot;i&quot;force_rotation&quot;i&quot;no_enhancement&quot;i&quot;pad&quot;[6I]}' declared_type='WebPDecoderOptions*'/>
<field name='scaler_y' type='{_WebPRescaler=&quot;x_expand&quot;i&quot;num_channels&quot;i&quot;fy_scale&quot;i&quot;fx_scale&quot;i&quot;fxy_scale&quot;q&quot;y_accum&quot;i&quot;y_add&quot;i&quot;y_sub&quot;i&quot;x_add&quot;i&quot;x_sub&quot;i&quot;src_width&quot;i&quot;src_height&quot;i&quot;dst_width&quot;i&quot;dst_height&quot;i&quot;dst&quot;*&quot;dst_stride&quot;i&quot;irow&quot;^i&quot;frow&quot;^i}' declared_type='WebPRescaler'/>
<field name='scaler_u' type='{_WebPRescaler=&quot;x_expand&quot;i&quot;num_channels&quot;i&quot;fy_scale&quot;i&quot;fx_scale&quot;i&quot;fxy_scale&quot;q&quot;y_accum&quot;i&quot;y_add&quot;i&quot;y_sub&quot;i&quot;x_add&quot;i&quot;x_sub&quot;i&quot;src_width&quot;i&quot;src_height&quot;i&quot;dst_width&quot;i&quot;dst_height&quot;i&quot;dst&quot;*&quot;dst_stride&quot;i&quot;irow&quot;^i&quot;frow&quot;^i}' declared_type='WebPRescaler'/>
<field name='scaler_v' type='{_WebPRescaler=&quot;x_expand&quot;i&quot;num_channels&quot;i&quot;fy_scale&quot;i&quot;fx_scale&quot;i&quot;fxy_scale&quot;q&quot;y_accum&quot;i&quot;y_add&quot;i&quot;y_sub&quot;i&quot;x_add&quot;i&quot;x_sub&quot;i&quot;src_width&quot;i&quot;src_height&quot;i&quot;dst_width&quot;i&quot;dst_height&quot;i&quot;dst&quot;*&quot;dst_stride&quot;i&quot;irow&quot;^i&quot;frow&quot;^i}' declared_type='WebPRescaler'/>
<field name='scaler_a' type='{_WebPRescaler=&quot;x_expand&quot;i&quot;num_channels&quot;i&quot;fy_scale&quot;i&quot;fx_scale&quot;i&quot;fxy_scale&quot;q&quot;y_accum&quot;i&quot;y_add&quot;i&quot;y_sub&quot;i&quot;x_add&quot;i&quot;x_sub&quot;i&quot;src_width&quot;i&quot;src_height&quot;i&quot;dst_width&quot;i&quot;dst_height&quot;i&quot;dst&quot;*&quot;dst_stride&quot;i&quot;irow&quot;^i&quot;frow&quot;^i}' declared_type='WebPRescaler'/>
<field name='memory' type='^v' declared_type='void*'/>
<field name='emit' type='^?' declared_type='OutputFunc' function_pointer='true'>
<arg const='true' type='^{VP8Io=iiiii***ii^v^?^?^?iI*iiiiiiiii*}' declared_type='VP8Io*'/>
<arg const='true' type='^{WebPDecParams=^{WebPDecBuffer=iiii(?={WebPRGBABuffer=*iI}{WebPYUVABuffer=****iiiiIIII})[4I]*}***i^{WebPDecoderOptions=iiiiiiiiiiiii[6I]}{_WebPRescaler=iiiiqiiiiiiiii*i^i^i}{_WebPRescaler=iiiiqiiiiiiiii*i^i^i}{_WebPRescaler=iiiiqiiiiiiiii*i^i^i}{_WebPRescaler=iiiiqiiiiiiiii*i^i^i}^v^?^?^?}' declared_type='WebPDecParams*'/>
<retval type='i' declared_type='int'/>
</field>
<field name='emit_alpha' type='^?' declared_type='OutputFunc' function_pointer='true'>
<arg const='true' type='^{VP8Io=iiiii***ii^v^?^?^?iI*iiiiiiiii*}' declared_type='VP8Io*'/>
<arg const='true' type='^{WebPDecParams=^{WebPDecBuffer=iiii(?={WebPRGBABuffer=*iI}{WebPYUVABuffer=****iiiiIIII})[4I]*}***i^{WebPDecoderOptions=iiiiiiiiiiiii[6I]}{_WebPRescaler=iiiiqiiiiiiiii*i^i^i}{_WebPRescaler=iiiiqiiiiiiiii*i^i^i}{_WebPRescaler=iiiiqiiiiiiiii*i^i^i}{_WebPRescaler=iiiiqiiiiiiiii*i^i^i}^v^?^?^?}' declared_type='WebPDecParams*'/>
<retval type='i' declared_type='int'/>
</field>
<field name='emit_alpha_row' type='^?' declared_type='OutputRowFunc' function_pointer='true'>
<arg const='true' type='^{WebPDecParams=^{WebPDecBuffer=iiii(?={WebPRGBABuffer=*iI}{WebPYUVABuffer=****iiiiIIII})[4I]*}***i^{WebPDecoderOptions=iiiiiiiiiiiii[6I]}{_WebPRescaler=iiiiqiiiiiiiii*i^i^i}{_WebPRescaler=iiiiqiiiiiiiii*i^i^i}{_WebPRescaler=iiiiqiiiiiiiii*i^i^i}{_WebPRescaler=iiiiqiiiiiiiii*i^i^i}^v^?^?^?}' declared_type='WebPDecParams*'/>
<arg type='i' declared_type='int'/>
<retval type='i' declared_type='int'/>
</field>
</struct>
<struct name='WebPDecoderConfig' type='{WebPDecoderConfig=&quot;input&quot;{WebPBitstreamFeatures=&quot;width&quot;i&quot;height&quot;i&quot;has_alpha&quot;i&quot;has_animation&quot;i&quot;bitstream_version&quot;i&quot;no_incremental_decoding&quot;i&quot;rotate&quot;i&quot;uv_sampling&quot;i&quot;pad&quot;[2I]}&quot;output&quot;{WebPDecBuffer=&quot;colorspace&quot;i&quot;width&quot;i&quot;height&quot;i&quot;is_external_memory&quot;i&quot;u&quot;(?=&quot;RGBA&quot;{WebPRGBABuffer=&quot;rgba&quot;*&quot;stride&quot;i&quot;size&quot;I}&quot;YUVA&quot;{WebPYUVABuffer=&quot;y&quot;*&quot;u&quot;*&quot;v&quot;*&quot;a&quot;*&quot;y_stride&quot;i&quot;u_stride&quot;i&quot;v_stride&quot;i&quot;a_stride&quot;i&quot;y_size&quot;I&quot;u_size&quot;I&quot;v_size&quot;I&quot;a_size&quot;I})&quot;pad&quot;[4I]&quot;private_memory&quot;*}&quot;options&quot;{WebPDecoderOptions=&quot;bypass_filtering&quot;i&quot;no_fancy_upsampling&quot;i&quot;use_cropping&quot;i&quot;crop_left&quot;i&quot;crop_top&quot;i&quot;crop_width&quot;i&quot;crop_height&quot;i&quot;use_scaling&quot;i&quot;scaled_width&quot;i&quot;scaled_height&quot;i&quot;use_threads&quot;i&quot;force_rotation&quot;i&quot;no_enhancement&quot;i&quot;pad&quot;[6I]}}'>
<field name='input' type='{WebPBitstreamFeatures=&quot;width&quot;i&quot;height&quot;i&quot;has_alpha&quot;i&quot;has_animation&quot;i&quot;bitstream_version&quot;i&quot;no_incremental_decoding&quot;i&quot;rotate&quot;i&quot;uv_sampling&quot;i&quot;pad&quot;[2I]}' declared_type='WebPBitstreamFeatures'/>
<field name='output' type='{WebPDecBuffer=&quot;colorspace&quot;i&quot;width&quot;i&quot;height&quot;i&quot;is_external_memory&quot;i&quot;u&quot;(?=&quot;RGBA&quot;{WebPRGBABuffer=&quot;rgba&quot;*&quot;stride&quot;i&quot;size&quot;I}&quot;YUVA&quot;{WebPYUVABuffer=&quot;y&quot;*&quot;u&quot;*&quot;v&quot;*&quot;a&quot;*&quot;y_stride&quot;i&quot;u_stride&quot;i&quot;v_stride&quot;i&quot;a_stride&quot;i&quot;y_size&quot;I&quot;u_size&quot;I&quot;v_size&quot;I&quot;a_size&quot;I})&quot;pad&quot;[4I]&quot;private_memory&quot;*}' declared_type='WebPDecBuffer'/>
<field name='options' type='{WebPDecoderOptions=&quot;bypass_filtering&quot;i&quot;no_fancy_upsampling&quot;i&quot;use_cropping&quot;i&quot;crop_left&quot;i&quot;crop_top&quot;i&quot;crop_width&quot;i&quot;crop_height&quot;i&quot;use_scaling&quot;i&quot;scaled_width&quot;i&quot;scaled_height&quot;i&quot;use_threads&quot;i&quot;force_rotation&quot;i&quot;no_enhancement&quot;i&quot;pad&quot;[6I]}' declared_type='WebPDecoderOptions'/>
</struct>
<struct name='WebPDecoderOptions' type='{WebPDecoderOptions=&quot;bypass_filtering&quot;i&quot;no_fancy_upsampling&quot;i&quot;use_cropping&quot;i&quot;crop_left&quot;i&quot;crop_top&quot;i&quot;crop_width&quot;i&quot;crop_height&quot;i&quot;use_scaling&quot;i&quot;scaled_width&quot;i&quot;scaled_height&quot;i&quot;use_threads&quot;i&quot;force_rotation&quot;i&quot;no_enhancement&quot;i&quot;pad&quot;[6I]}'>
<field name='bypass_filtering' type='i' declared_type='int'/>
<field name='no_fancy_upsampling' type='i' declared_type='int'/>
<field name='use_cropping' type='i' declared_type='int'/>
<field name='crop_left' type='i' declared_type='int'/>
<field name='crop_top' type='i' declared_type='int'/>
<field name='crop_width' type='i' declared_type='int'/>
<field name='crop_height' type='i' declared_type='int'/>
<field name='use_scaling' type='i' declared_type='int'/>
<field name='scaled_width' type='i' declared_type='int'/>
<field name='scaled_height' type='i' declared_type='int'/>
<field name='use_threads' type='i' declared_type='int'/>
<field name='force_rotation' type='i' declared_type='int'/>
<field name='no_enhancement' type='i' declared_type='int'/>
<field name='pad' type='[6I]' declared_type='uint32_t*'/>
</struct>
<struct name='WebPHeaderStructure' type='{_WebPHeaderStructure=&quot;data&quot;*&quot;data_size&quot;I&quot;offset&quot;I&quot;alpha_data&quot;*&quot;alpha_data_size&quot;I&quot;compressed_size&quot;I&quot;riff_size&quot;I&quot;is_lossless&quot;i}'>
<field const='true' name='data' type='*' declared_type='uint8_t*'/>
<field name='data_size' type='L' declared_type='size_t'/>
<field name='offset' type='L' declared_type='size_t'/>
<field const='true' name='alpha_data' type='*' declared_type='uint8_t*'/>
<field name='alpha_data_size' type='L' declared_type='size_t'/>
<field name='compressed_size' type='L' declared_type='size_t'/>
<field name='riff_size' type='L' declared_type='size_t'/>
<field name='is_lossless' type='i' declared_type='int'/>
</struct>
<struct name='WebPRGBABuffer' type='{WebPRGBABuffer=&quot;rgba&quot;*&quot;stride&quot;i&quot;size&quot;I}'>
<field name='rgba' type='*' declared_type='uint8_t*'/>
<field name='stride' type='i' declared_type='int'/>
<field name='size' type='L' declared_type='size_t'/>
</struct>
<struct name='WebPRescaler' type='{_WebPRescaler=&quot;x_expand&quot;i&quot;num_channels&quot;i&quot;fy_scale&quot;i&quot;fx_scale&quot;i&quot;fxy_scale&quot;q&quot;y_accum&quot;i&quot;y_add&quot;i&quot;y_sub&quot;i&quot;x_add&quot;i&quot;x_sub&quot;i&quot;src_width&quot;i&quot;src_height&quot;i&quot;dst_width&quot;i&quot;dst_height&quot;i&quot;dst&quot;*&quot;dst_stride&quot;i&quot;irow&quot;^i&quot;frow&quot;^i}'>
<field name='x_expand' type='i' declared_type='int'/>
<field name='num_channels' type='i' declared_type='int'/>
<field name='fy_scale' type='i' declared_type='int'/>
<field name='fx_scale' type='i' declared_type='int'/>
<field name='fxy_scale' type='q' declared_type='int64_t'/>
<field name='y_accum' type='i' declared_type='int'/>
<field name='y_add' type='i' declared_type='int'/>
<field name='y_sub' type='i' declared_type='int'/>
<field name='x_add' type='i' declared_type='int'/>
<field name='x_sub' type='i' declared_type='int'/>
<field name='src_width' type='i' declared_type='int'/>
<field name='src_height' type='i' declared_type='int'/>
<field name='dst_width' type='i' declared_type='int'/>
<field name='dst_height' type='i' declared_type='int'/>
<field name='dst' type='*' declared_type='uint8_t*'/>
<field name='dst_stride' type='i' declared_type='int'/>
<field name='irow' type='^i' declared_type='int32_t*'/>
<field name='frow' type='^i' declared_type='int32_t*'/>
</struct>
<struct name='WebPWorker' type='{_WebPWorker=&quot;status_&quot;i&quot;hook&quot;^?&quot;data1&quot;^v&quot;data2&quot;^v&quot;had_error&quot;i}'>
<field name='status_' type='i' declared_type='WebPWorkerStatus'/>
<field name='hook' type='^?' declared_type='WebPWorkerHook' function_pointer='true'>
<arg type='^v' declared_type='void*'/>
<arg type='^v' declared_type='void*'/>
<retval type='i' declared_type='int'/>
</field>
<field name='data1' type='^v' declared_type='void*'/>
<field name='data2' type='^v' declared_type='void*'/>
<field name='had_error' type='i' declared_type='int'/>
</struct>
<struct name='WebPYUVABuffer' type='{WebPYUVABuffer=&quot;y&quot;*&quot;u&quot;*&quot;v&quot;*&quot;a&quot;*&quot;y_stride&quot;i&quot;u_stride&quot;i&quot;v_stride&quot;i&quot;a_stride&quot;i&quot;y_size&quot;I&quot;u_size&quot;I&quot;v_size&quot;I&quot;a_size&quot;I}'>
<field name='y' type='*' declared_type='uint8_t*'/>
<field name='u' type='*' declared_type='uint8_t*'/>
<field name='v' type='*' declared_type='uint8_t*'/>
<field name='a' type='*' declared_type='uint8_t*'/>
<field name='y_stride' type='i' declared_type='int'/>
<field name='u_stride' type='i' declared_type='int'/>
<field name='v_stride' type='i' declared_type='int'/>
<field name='a_stride' type='i' declared_type='int'/>
<field name='y_size' type='L' declared_type='size_t'/>
<field name='u_size' type='L' declared_type='size_t'/>
<field name='v_size' type='L' declared_type='size_t'/>
<field name='a_size' type='L' declared_type='size_t'/>
</struct>
<opaque name='WebPIDecoder' type='^{WebPIDecoder=}'/>
<constant const='true' name='SDWebImageDownloadStartNotification' type='@' declared_type='NSString*'/>
<constant const='true' name='SDWebImageDownloadStopNotification' type='@' declared_type='NSString*'/>
<constant const='true' name='VP8DspScan' type='[24i]' declared_type='int*'/>
<constant const='true' name='VP8PredChroma8' type='^^?' declared_type='VP8PredFunc*'/>
<constant const='true' name='VP8PredLuma16' type='^^?' declared_type='VP8PredFunc*'/>
<constant const='true' name='VP8PredLuma4' type='^^?' declared_type='VP8PredFunc*'/>
<constant name='VP8kClip' type='[709C]' declared_type='uint8_t*'/>
<constant name='VP8kClip4Bits' type='[709C]' declared_type='uint8_t*'/>
<constant name='VP8kUToB' type='[256s]' declared_type='int16_t*'/>
<constant name='VP8kUToG' type='[256i]' declared_type='int32_t*'/>
<constant name='VP8kVToG' type='[256i]' declared_type='int32_t*'/>
<constant name='VP8kVToR' type='[256s]' declared_type='int16_t*'/>
<constant const='true' name='WebPFilters' type='[4^?]' declared_type='WebPFilterFunc*'/>
<constant const='true' name='WebPSamplers' type='^^?' declared_type='WebPSampleLinePairFunc*'/>
<constant const='true' name='WebPUnfilters' type='[4^?]' declared_type='WebPUnfilterFunc*'/>
<constant name='WebPUpsamplers' type='^^?' declared_type='WebPUpsampleLinePairFunc*'/>
<constant const='true' name='WebPYUV444Converters' type='^^?' declared_type='WebPYUV444Converter*'/>
<constant const='true' name='kHashMul' type='I' declared_type='uint32_t'/>
<constant const='true' name='kLog2Table' type='[256f]' declared_type='float*'/>
<constant const='true' name='kSLog2Table' type='[256f]' declared_type='float*'/>
<constant const='true' name='kVP8Log2Range' type='[128C]' declared_type='uint8_t*'/>
<constant const='true' name='kVP8NewRange' type='[128I]' declared_type='range_t*'/>
<enum name='ALPHA_FLAG' value='16'/>
<enum name='ALPHA_HEADER_LEN' value='1'/>
<enum name='ALPHA_LOSSLESS_COMPRESSION' value='1'/>
<enum name='ALPHA_NO_COMPRESSION' value='0'/>
<enum name='ALPHA_PREPROCESSED_LEVELS' value='1'/>
<enum name='ANIMATION_FLAG' value='2'/>
<enum name='ANIM_CHUNK_SIZE' value='6'/>
<enum name='ANMF_CHUNK_SIZE' value='16'/>
<enum name='ARGB_BLACK' value='4278190080'/>
<enum name='BITS' value='16'/>
<enum name='BPS' value='32'/>
<enum name='B_DC_PRED' value='0'/>
<enum name='B_DC_PRED_NOLEFT' value='5'/>
<enum name='B_DC_PRED_NOTOP' value='4'/>
<enum name='B_DC_PRED_NOTOPLEFT' value='6'/>
<enum name='B_HD_PRED' value='8'/>
<enum name='B_HE_PRED' value='3'/>
<enum name='B_HU_PRED' value='9'/>
<enum name='B_LD_PRED' value='6'/>
<enum name='B_PRED' value='10'/>
<enum name='B_RD_PRED' value='4'/>
<enum name='B_TM_PRED' value='1'/>
<enum name='B_VE_PRED' value='2'/>
<enum name='B_VL_PRED' value='7'/>
<enum name='B_VR_PRED' value='5'/>
<enum name='CHUNK_HEADER_SIZE' value='8'/>
<enum name='CHUNK_SIZE_BYTES' value='4'/>
<enum name='COCOAPODS_VERSION_MAJOR_NSData_MD5Digest' value='1'/>
<enum name='COCOAPODS_VERSION_MAJOR_SDWebImage' value='3'/>
<enum name='COCOAPODS_VERSION_MAJOR_SDWebImage_MapKit' value='3'/>
<enum name='COCOAPODS_VERSION_MAJOR_ViewDeck' value='2'/>
<enum name='COCOAPODS_VERSION_MAJOR_libwebp' value='0'/>
<enum name='COCOAPODS_VERSION_MAJOR_libwebp_dec' value='0'/>
<enum name='COCOAPODS_VERSION_MAJOR_libwebp_dsp' value='0'/>
<enum name='COCOAPODS_VERSION_MAJOR_libwebp_utils' value='0'/>
<enum name='COCOAPODS_VERSION_MAJOR_libwebp_webp' value='0'/>
<enum name='COCOAPODS_VERSION_MINOR_NSData_MD5Digest' value='0'/>
<enum name='COCOAPODS_VERSION_MINOR_SDWebImage' value='3'/>
<enum name='COCOAPODS_VERSION_MINOR_SDWebImage_MapKit' value='3'/>
<enum name='COCOAPODS_VERSION_MINOR_ViewDeck' value='3'/>
<enum name='COCOAPODS_VERSION_MINOR_libwebp' value='3'/>
<enum name='COCOAPODS_VERSION_MINOR_libwebp_dec' value='3'/>
<enum name='COCOAPODS_VERSION_MINOR_libwebp_dsp' value='3'/>
<enum name='COCOAPODS_VERSION_MINOR_libwebp_utils' value='3'/>
<enum name='COCOAPODS_VERSION_MINOR_libwebp_webp' value='3'/>
<enum name='COCOAPODS_VERSION_PATCH_NSData_MD5Digest' value='0'/>
<enum name='COCOAPODS_VERSION_PATCH_SDWebImage' value='0'/>
<enum name='COCOAPODS_VERSION_PATCH_SDWebImage_MapKit' value='0'/>
<enum name='COCOAPODS_VERSION_PATCH_ViewDeck' value='1'/>
<enum name='COCOAPODS_VERSION_PATCH_libwebp' value='0'/>
<enum name='COCOAPODS_VERSION_PATCH_libwebp_dec' value='0'/>
<enum name='COCOAPODS_VERSION_PATCH_libwebp_dsp' value='0'/>
<enum name='COCOAPODS_VERSION_PATCH_libwebp_utils' value='0'/>
<enum name='COCOAPODS_VERSION_PATCH_libwebp_webp' value='0'/>
<enum name='CODE_LENGTH_CODES' value='19'/>
<enum name='COLOR_INDEXING_TRANSFORM' value='3'/>
<enum name='CROSS_COLOR_TRANSFORM' value='1'/>
<enum name='DC_PRED' value='0'/>
<enum name='DEC_MAJ_VERSION' value='0'/>
<enum name='DEC_MIN_VERSION' value='3'/>
<enum name='DEC_REV_VERSION' value='0'/>
<enum name='DEFAULT_CODE_LENGTH' value='8'/>
<enum name='EXIF_FLAG' value='8'/>
<enum name='FRAGMENTS_FLAG' value='1'/>
<enum name='FRGM_CHUNK_SIZE' value='6'/>
<enum name='HUFFMAN_CODES_PER_META_CODE' value='5'/>
<enum name='H_PRED' value='3'/>
<enum name='ICCP_FLAG' value='32'/>
<enum name='IIViewDeckAllViewsPanning' value='6'/>
<enum name='IIViewDeckBottomSide' value='4'/>
<enum name='IIViewDeckCenterHiddenNotUserInteractive' value='1'/>
<enum name='IIViewDeckCenterHiddenNotUserInteractiveWithTapToClose' value='2'/>
<enum name='IIViewDeckCenterHiddenNotUserInteractiveWithTapToCloseBouncing' value='3'/>
<enum name='IIViewDeckCenterHiddenUserInteractive' value='0'/>
<enum name='IIViewDeckDelegateAndSubControllers' value='1'/>
<enum name='IIViewDeckDelegateOnly' value='0'/>
<enum name='IIViewDeckDelegatePanning' value='4'/>
<enum name='IIViewDeckFullViewPanning' value='1'/>
<enum name='IIViewDeckHorizontalOrientation' value='1'/>
<enum name='IIViewDeckLedgeSizeMode' value='0'/>
<enum name='IIViewDeckLeftSide' value='1'/>
<enum name='IIViewDeckNavigationBarOrOpenCenterPanning' value='5'/>
<enum name='IIViewDeckNavigationBarPanning' value='2'/>
<enum name='IIViewDeckNavigationControllerContained' value='0'/>
<enum name='IIViewDeckNavigationControllerIntegrated' value='1'/>
<enum name='IIViewDeckNoPanning' value='0'/>
<enum name='IIViewDeckPanningViewPanning' value='3'/>
<enum name='IIViewDeckRightSide' value='2'/>
<enum name='IIViewDeckTopSide' value='3'/>
<enum name='IIViewDeckVerticalOrientation' value='2'/>
<enum name='IIViewDeckViewSizeMode' value='1'/>
<enum name='LOG_LOOKUP_IDX_MAX' value='256'/>
<enum name='MAX_ALLOWED_CODE_LENGTH' value='15'/>
<enum name='MAX_CACHE_BITS' value='11'/>
<enum name='MAX_CANVAS_SIZE' value='16777216'/>
<enum name='MAX_CHUNK_PAYLOAD' value='4294967286'/>
<enum name='MAX_DURATION' value='16777216'/>
<enum name='MAX_HUFFMAN_BITS' value='9'/>
<enum name='MAX_IMAGE_AREA' value='4294967296'/>
<enum name='MAX_LOOP_COUNT' value='65536'/>
<enum name='MAX_NUM_PARTITIONS' value='8'/>
<enum name='MAX_PALETTE_SIZE' value='256'/>
<enum name='MAX_POSITION_OFFSET' value='16777216'/>
<enum name='MB_FEATURE_TREE_PROBS' value='3'/>
<enum name='MIN_HUFFMAN_BITS' value='2'/>
<enum name='MODE_ARGB' value='4'/>
<enum name='MODE_Argb' value='9'/>
<enum name='MODE_BGR' value='2'/>
<enum name='MODE_BGRA' value='3'/>
<enum name='MODE_LAST' value='13'/>
<enum name='MODE_RGB' value='0'/>
<enum name='MODE_RGBA' value='1'/>
<enum name='MODE_RGBA_4444' value='5'/>
<enum name='MODE_RGB_565' value='6'/>
<enum name='MODE_YUV' value='11'/>
<enum name='MODE_YUVA' value='12'/>
<enum name='MODE_bgrA' value='8'/>
<enum name='MODE_rgbA' value='7'/>
<enum name='MODE_rgbA_4444' value='10'/>
<enum name='NOT_OK' value='0'/>
<enum name='NUM_BANDS' value='8'/>
<enum name='NUM_BMODES' value='10'/>
<enum name='NUM_B_DC_MODES' value='7'/>
<enum name='NUM_CTX' value='3'/>
<enum name='NUM_DISTANCE_CODES' value='40'/>
<enum name='NUM_LENGTH_CODES' value='24'/>
<enum name='NUM_LITERAL_CODES' value='256'/>
<enum name='NUM_MB_SEGMENTS' value='4'/>
<enum name='NUM_MODE_LF_DELTAS' value='4'/>
<enum name='NUM_MV_PROBAS' value='19'/>
<enum name='NUM_PROBAS' value='11'/>
<enum name='NUM_REF_LF_DELTAS' value='4'/>
<enum name='NUM_TRANSFORMS' value='4'/>
<enum name='NUM_TYPES' value='4'/>
<enum name='OK' value='1'/>
<enum name='PREDICTOR_TRANSFORM' value='0'/>
<enum name='READ_DATA' value='0'/>
<enum name='READ_DIM' value='2'/>
<enum name='READ_HDR' value='1'/>
<enum name='RIFF_HEADER_SIZE' value='12'/>
<enum name='SDImageCacheTypeDisk' value='1'/>
<enum name='SDImageCacheTypeMemory' value='2'/>
<enum name='SDImageCacheTypeNone' value='0'/>
<enum name='SDWebImageCacheMemoryOnly' value='4'/>
<enum name='SDWebImageDownloaderFIFOExecutionOrder' value='0'/>
<enum name='SDWebImageDownloaderIgnoreCachedResponse' value='8'/>
<enum name='SDWebImageDownloaderLIFOExecutionOrder' value='1'/>
<enum name='SDWebImageDownloaderLowPriority' value='1'/>
<enum name='SDWebImageDownloaderProgressiveDownload' value='2'/>
<enum name='SDWebImageDownloaderUseNSURLCache' value='4'/>
<enum name='SDWebImageLowPriority' value='2'/>
<enum name='SDWebImageProgressiveDownload' value='8'/>
<enum name='SDWebImageRefreshCached' value='16'/>
<enum name='SDWebImageRetryFailed' value='1'/>
<enum name='SUBTRACT_GREEN' value='2'/>
<enum name='TAG_SIZE' value='4'/>
<enum name='TM_PRED' value='1'/>
<enum name='TRANSFORM_PRESENT' value='1'/>
<enum name='U_OFF' value='584'/>
<enum name='VP8L_FRAME_HEADER_SIZE' value='5'/>
<enum name='VP8L_IMAGE_SIZE_BITS' value='14'/>
<enum name='VP8L_MAGIC_BYTE' value='47'/>
<enum name='VP8L_SIGNATURE_SIZE' value='1'/>
<enum name='VP8L_VERSION' value='0'/>
<enum name='VP8L_VERSION_BITS' value='3'/>
<enum name='VP8X_CHUNK_SIZE' value='10'/>
<enum name='VP8_FRAME_HEADER_SIZE' value='10'/>
<enum name='VP8_MAX_PARTITION0_SIZE' value='524288'/>
<enum name='VP8_MAX_PARTITION_SIZE' value='16777216'/>
<enum name='VP8_SIGNATURE' value='10289450'/>
<enum name='VP8_STATUS_BITSTREAM_ERROR' value='3'/>
<enum name='VP8_STATUS_INVALID_PARAM' value='2'/>
<enum name='VP8_STATUS_NOT_ENOUGH_DATA' value='7'/>
<enum name='VP8_STATUS_OK' value='0'/>
<enum name='VP8_STATUS_OUT_OF_MEMORY' value='1'/>
<enum name='VP8_STATUS_SUSPENDED' value='5'/>
<enum name='VP8_STATUS_UNSUPPORTED_FEATURE' value='4'/>
<enum name='VP8_STATUS_USER_ABORT' value='6'/>
<enum name='V_OFF' value='600'/>
<enum name='V_PRED' value='2'/>
<enum name='WEBP_DECODER_ABI_VERSION' value='513'/>
<enum name='WEBP_FILTER_BEST' value='5'/>
<enum name='WEBP_FILTER_FAST' value='6'/>
<enum name='WEBP_FILTER_GRADIENT' value='3'/>
<enum name='WEBP_FILTER_HORIZONTAL' value='1'/>
<enum name='WEBP_FILTER_LAST' value='4'/>
<enum name='WEBP_FILTER_NONE' value='0'/>
<enum name='WEBP_FILTER_VERTICAL' value='2'/>
<enum name='WEBP_MAX_ALLOCABLE_MEMORY' value='1099511627776'/>
<enum name='WEBP_MUX_DISPOSE_BACKGROUND' value='1'/>
<enum name='WEBP_MUX_DISPOSE_NONE' value='0'/>
<enum name='WORK' value='2'/>
<enum name='XMP_FLAG' value='4'/>
<enum name='YUV_FIX' value='16'/>
<enum name='YUV_HALF' value='32768'/>
<enum name='YUV_MASK' value='16777215'/>
<enum name='YUV_RANGE_MAX' value='482'/>
<enum name='YUV_RANGE_MIN' value='-227'/>
<enum name='YUV_SIZE' value='832'/>
<enum name='Y_OFF' value='40'/>
<enum name='Y_SIZE' value='544'/>
<enum name='kNEON' value='2'/>
<enum name='kSSE2' value='0'/>
<enum name='kSSE3' value='1'/>
<function name='DequantizeLevels'>
<arg const='true' name='data' type='*' declared_type='uint8_t*'/>
<arg name='width' type='i' declared_type='int'/>
<arg name='height' type='i' declared_type='int'/>
<retval type='i' declared_type='int'/>
</function>
<function name='EstimateBestFilter'>
<arg const='true' name='data' type='*' declared_type='uint8_t*'/>
<arg name='width' type='i' declared_type='int'/>
<arg name='height' type='i' declared_type='int'/>
<arg name='stride' type='i' declared_type='int'/>
<retval type='i' declared_type='WEBP_FILTER_TYPE'/>
</function>
<function name='GetLE16' inline='true'>
<arg const='true' name='data' type='*' declared_type='uint8_t*'/>
<retval type='i' declared_type='int'/>
</function>
<function name='GetLE24' inline='true'>
<arg const='true' name='data' type='*' declared_type='uint8_t*'/>
<retval type='i' declared_type='int'/>
</function>
<function name='GetLE32' inline='true'>
<arg const='true' name='data' type='*' declared_type='uint8_t*'/>
<retval type='I' declared_type='uint32_t'/>
</function>
<function name='HuffmanCodeLengthsToCodes'>
<arg const='true' name='code_lengths' type='^i' declared_type='int*'/>
<arg name='code_lengths_size' type='i' declared_type='int'/>
<arg const='true' name='huff_codes' type='^i' declared_type='int*'/>
<retval type='i' declared_type='int'/>
</function>
<function name='HuffmanTreeBuildExplicit'>
<arg const='true' name='tree' type='^{HuffmanTree=^{_HuffmanTreeNode=ii}ii}' declared_type='HuffmanTree*'/>
<arg const='true' name='code_lengths' type='^i' declared_type='int*'/>
<arg const='true' name='codes' type='^i' declared_type='int*'/>
<arg const='true' name='symbols' type='^i' declared_type='int*'/>
<arg name='max_symbol' type='i' declared_type='int'/>
<arg name='num_symbols' type='i' declared_type='int'/>
<retval type='i' declared_type='int'/>
</function>
<function name='HuffmanTreeBuildImplicit'>
<arg const='true' name='tree' type='^{HuffmanTree=^{_HuffmanTreeNode=ii}ii}' declared_type='HuffmanTree*'/>
<arg const='true' name='code_lengths' type='^i' declared_type='int*'/>
<arg name='code_lengths_size' type='i' declared_type='int'/>
<retval type='i' declared_type='int'/>
</function>
<function name='HuffmanTreeNextNode' inline='true'>
<arg const='true' name='node' type='^{_HuffmanTreeNode=ii}' declared_type='HuffmanTreeNode*'/>
<arg name='right_child' type='i' declared_type='int'/>
<retval const='true' type='^{_HuffmanTreeNode=ii}' declared_type='HuffmanTreeNode*'/>
</function>
<function name='HuffmanTreeNodeIsLeaf' inline='true'>
<arg const='true' name='node' type='^{_HuffmanTreeNode=ii}' declared_type='HuffmanTreeNode*'/>
<retval type='i' declared_type='int'/>
</function>
<function name='HuffmanTreeRelease'>
<arg const='true' name='tree' type='^{HuffmanTree=^{_HuffmanTreeNode=ii}ii}' declared_type='HuffmanTree*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='IIViewDeckOffsetOrientationFromIIViewDeckSide'>
<arg name='side' type='L' declared_type='IIViewDeckSide'/>
<retval type='L' declared_type='IIViewDeckOffsetOrientation'/>
</function>
<function name='NSStringFromIIViewDeckSide'>
<arg name='side' type='L' declared_type='IIViewDeckSide'/>
<retval type='@' declared_type='NSString*'/>
</function>
<function name='PutLE16' inline='true'>
<arg const='true' name='data' type='*' declared_type='uint8_t*'/>
<arg name='val' type='i' declared_type='int'/>
<retval type='v' declared_type='void'/>
</function>
<function name='PutLE24' inline='true'>
<arg const='true' name='data' type='*' declared_type='uint8_t*'/>
<arg name='val' type='i' declared_type='int'/>
<retval type='v' declared_type='void'/>
</function>
<function name='PutLE32' inline='true'>
<arg const='true' name='data' type='*' declared_type='uint8_t*'/>
<arg name='val' type='I' declared_type='uint32_t'/>
<retval type='v' declared_type='void'/>
</function>
<function name='SDScaledImageForKey' inline='true'>
<arg name='key' type='@' declared_type='NSString*'/>
<arg name='image' type='@' declared_type='UIImage*'/>
<retval type='@' declared_type='UIImage*'/>
</function>
<function name='VP8BitUpdate' inline='true'>
<arg const='true' name='br' type='^{VP8BitReader=**iIIi}' declared_type='VP8BitReader*'/>
<arg name='split' type='I' declared_type='range_t'/>
<retval type='i' declared_type='int'/>
</function>
<function name='VP8CheckSignature'>
<arg const='true' name='data' type='*' declared_type='uint8_t*'/>
<arg name='data_size' type='L' declared_type='size_t'/>
<retval type='i' declared_type='int'/>
</function>
<function name='VP8Clear'>
<arg const='true' name='dec' type='^{_VP8FInfo=b6b6b1}' declared_type='VP8Decoder*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='VP8ClipUV' inline='true'>
<arg name='v' type='i' declared_type='int'/>
<retval type='i' declared_type='int'/>
</function>
<function name='VP8Decode'>
<arg const='true' name='dec' type='^{_VP8FInfo=b6b6b1}' declared_type='VP8Decoder*'/>
<arg const='true' name='io' type='^{VP8Io=iiiii***ii^v^?^?^?iI*iiiiiiiii*}' declared_type='VP8Io*'/>
<retval type='i' declared_type='int'/>
</function>
<function name='VP8DecodeLayer'>
<arg const='true' name='dec' type='^{_VP8FInfo=b6b6b1}' declared_type='VP8Decoder*'/>
<retval type='i' declared_type='int'/>
</function>
<function name='VP8DecodeMB'>
<arg const='true' name='dec' type='^{_VP8FInfo=b6b6b1}' declared_type='VP8Decoder*'/>
<arg const='true' name='token_br' type='^{VP8BitReader=**iIIi}' declared_type='VP8BitReader*'/>
<retval type='i' declared_type='int'/>
</function>
<function name='VP8DecompressAlphaRows'>
<arg const='true' name='dec' type='^{_VP8FInfo=b6b6b1}' declared_type='VP8Decoder*'/>
<arg name='row' type='i' declared_type='int'/>
<arg name='num_rows' type='i' declared_type='int'/>
<retval const='true' type='*' declared_type='uint8_t*'/>
</function>
<function name='VP8Delete'>
<arg const='true' name='dec' type='^{_VP8FInfo=b6b6b1}' declared_type='VP8Decoder*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='VP8DspInit'>
<retval type='v' declared_type='void'/>
</function>
<function name='VP8EncDspInit'>
<retval type='v' declared_type='void'/>
</function>
<function name='VP8EnterCritical'>
<arg const='true' name='dec' type='^{_VP8FInfo=b6b6b1}' declared_type='VP8Decoder*'/>
<arg const='true' name='io' type='^{VP8Io=iiiii***ii^v^?^?^?iI*iiiiiiiii*}' declared_type='VP8Io*'/>
<retval type='i' declared_type='VP8StatusCode'/>
</function>
<function name='VP8ExitCritical'>
<arg const='true' name='dec' type='^{_VP8FInfo=b6b6b1}' declared_type='VP8Decoder*'/>
<arg const='true' name='io' type='^{VP8Io=iiiii***ii^v^?^?^?iI*iiiiiiiii*}' declared_type='VP8Io*'/>
<retval type='i' declared_type='int'/>
</function>
<function name='VP8Get' inline='true'>
<arg const='true' name='br' type='^{VP8BitReader=**iIIi}' declared_type='VP8BitReader*'/>
<retval type='I' declared_type='uint32_t'/>
</function>
<function name='VP8GetBit' inline='true'>
<arg const='true' name='br' type='^{VP8BitReader=**iIIi}' declared_type='VP8BitReader*'/>
<arg name='prob' type='i' declared_type='int'/>
<retval type='i' declared_type='int'/>
</function>
<function name='VP8GetHeaders'>
<arg const='true' name='dec' type='^{_VP8FInfo=b6b6b1}' declared_type='VP8Decoder*'/>
<arg const='true' name='io' type='^{VP8Io=iiiii***ii^v^?^?^?iI*iiiiiiiii*}' declared_type='VP8Io*'/>
<retval type='i' declared_type='int'/>
</function>
<function name='VP8GetInfo'>
<arg const='true' name='data' type='*' declared_type='uint8_t*'/>
<arg name='data_size' type='L' declared_type='size_t'/>
<arg name='chunk_size' type='L' declared_type='size_t'/>
<arg const='true' name='width' type='^i' declared_type='int*'/>
<arg const='true' name='height' type='^i' declared_type='int*'/>
<retval type='i' declared_type='int'/>
</function>
<function name='VP8GetSigned' inline='true'>
<arg const='true' name='br' type='^{VP8BitReader=**iIIi}' declared_type='VP8BitReader*'/>
<arg name='v' type='i' declared_type='int'/>
<retval type='i' declared_type='int'/>
</function>
<function name='VP8GetSignedValue'>
<arg const='true' name='br' type='^{VP8BitReader=**iIIi}' declared_type='VP8BitReader*'/>
<arg name='num_bits' type='i' declared_type='int'/>
<retval type='i' declared_type='int32_t'/>
</function>
<function name='VP8GetValue'>
<arg const='true' name='br' type='^{VP8BitReader=**iIIi}' declared_type='VP8BitReader*'/>
<arg name='num_bits' type='i' declared_type='int'/>
<retval type='I' declared_type='uint32_t'/>
</function>
<function name='VP8InitBitReader'>
<arg const='true' name='br' type='^{VP8BitReader=**iIIi}' declared_type='VP8BitReader*'/>
<arg const='true' name='start' type='*' declared_type='uint8_t*'/>
<arg const='true' name='end' type='*' declared_type='uint8_t*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='VP8InitFrame'>
<arg const='true' name='dec' type='^{_VP8FInfo=b6b6b1}' declared_type='VP8Decoder*'/>
<arg name='io' type='^{VP8Io=iiiii***ii^v^?^?^?iI*iiiiiiiii*}' declared_type='VP8Io*'/>
<retval type='i' declared_type='int'/>
</function>
<function name='VP8InitIo' inline='true'>
<arg const='true' name='io' type='^{VP8Io=iiiii***ii^v^?^?^?iI*iiiiiiiii*}' declared_type='VP8Io*'/>
<retval type='i' declared_type='int'/>
</function>
<function name='VP8InitIoInternal'>
<arg const='true' type='^{VP8Io=iiiii***ii^v^?^?^?iI*iiiiiiiii*}' declared_type='VP8Io*'/>
<arg type='i' declared_type='int'/>
<retval type='i' declared_type='int'/>
</function>
<function name='VP8InitScanline'>
<arg const='true' name='dec' type='^{_VP8FInfo=b6b6b1}' declared_type='VP8Decoder*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='VP8LBitReaderSetBuffer'>
<arg const='true' name='br' type='^{_VP8LBitReader=Q*IIiii}' declared_type='VP8LBitReader*'/>
<arg const='true' name='buffer' type='*' declared_type='uint8_t*'/>
<arg name='length' type='L' declared_type='size_t'/>
<retval type='v' declared_type='void'/>
</function>
<function name='VP8LCheckSignature'>
<arg const='true' name='data' type='*' declared_type='uint8_t*'/>
<arg name='size' type='L' declared_type='size_t'/>
<retval type='i' declared_type='int'/>
</function>
<function name='VP8LClear'>
<arg const='true' name='dec' type='^{_WebPRescaler=iiiiqiiiiiiiii*i^i^i}' declared_type='VP8LDecoder*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='VP8LColorCacheClear'>
<arg const='true' name='color_cache' type='^{_VP8LColorCache=^Ii}' declared_type='VP8LColorCache*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='VP8LColorCacheContains' inline='true'>
<arg const='true' name='cc' type='^{_VP8LColorCache=^Ii}' declared_type='VP8LColorCache*'/>
<arg name='argb' type='I' declared_type='uint32_t'/>
<retval type='i' declared_type='int'/>
</function>
<function name='VP8LColorCacheGetIndex' inline='true'>
<arg const='true' name='cc' type='^{_VP8LColorCache=^Ii}' declared_type='VP8LColorCache*'/>
<arg name='argb' type='I' declared_type='uint32_t'/>
<retval type='i' declared_type='int'/>
</function>
<function name='VP8LColorCacheInit'>
<arg const='true' name='color_cache' type='^{_VP8LColorCache=^Ii}' declared_type='VP8LColorCache*'/>
<arg name='hash_bits' type='i' declared_type='int'/>
<retval type='i' declared_type='int'/>
</function>
<function name='VP8LColorCacheInsert' inline='true'>
<arg const='true' name='cc' type='^{_VP8LColorCache=^Ii}' declared_type='VP8LColorCache*'/>
<arg name='argb' type='I' declared_type='uint32_t'/>
<retval type='v' declared_type='void'/>
</function>
<function name='VP8LColorCacheLookup' inline='true'>
<arg const='true' name='cc' type='^{_VP8LColorCache=^Ii}' declared_type='VP8LColorCache*'/>
<arg name='key' type='I' declared_type='uint32_t'/>
<retval type='I' declared_type='uint32_t'/>
</function>
<function name='VP8LColorSpaceTransform'>
<arg name='width' type='i' declared_type='int'/>
<arg name='height' type='i' declared_type='int'/>
<arg name='bits' type='i' declared_type='int'/>
<arg name='step' type='i' declared_type='int'/>
<arg const='true' name='argb' type='^I' declared_type='uint32_t*'/>
<arg name='image' type='^I' declared_type='uint32_t*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='VP8LConvertFromBGRA'>
<arg const='true' name='in_data' type='^I' declared_type='uint32_t*'/>
<arg name='num_pixels' type='i' declared_type='int'/>
<arg name='out_colorspace' type='i' declared_type='WEBP_CSP_MODE'/>
<arg const='true' name='rgba' type='*' declared_type='uint8_t*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='VP8LDecodeAlphaImageStream'>
<arg name='width' type='i' declared_type='int'/>
<arg name='height' type='i' declared_type='int'/>
<arg const='true' name='data' type='*' declared_type='uint8_t*'/>
<arg name='data_size' type='L' declared_type='size_t'/>
<arg const='true' name='output' type='*' declared_type='uint8_t*'/>
<retval type='i' declared_type='int'/>
</function>
<function name='VP8LDecodeHeader'>
<arg const='true' name='dec' type='^{_WebPRescaler=iiiiqiiiiiiiii*i^i^i}' declared_type='VP8LDecoder*'/>
<arg const='true' name='io' type='^{VP8Io=iiiii***ii^v^?^?^?iI*iiiiiiiii*}' declared_type='VP8Io*'/>
<retval type='i' declared_type='int'/>
</function>
<function name='VP8LDecodeImage'>
<arg const='true' name='dec' type='^{_WebPRescaler=iiiiqiiiiiiiii*i^i^i}' declared_type='VP8LDecoder*'/>
<retval type='i' declared_type='int'/>
</function>
<function name='VP8LDelete'>
<arg const='true' name='dec' type='^{_WebPRescaler=iiiiqiiiiiiiii*i^i^i}' declared_type='VP8LDecoder*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='VP8LDiscardBits' inline='true'>
<arg const='true' name='br' type='^{_VP8LBitReader=Q*IIiii}' declared_type='VP8LBitReader*'/>
<arg name='num_bits' type='i' declared_type='int'/>
<retval type='v' declared_type='void'/>
</function>
<function name='VP8LFastLog2' inline='true'>
<arg name='v' type='i' declared_type='int'/>
<retval type='f' declared_type='float'/>
</function>
<function name='VP8LFastLog2Slow'>
<arg name='v' type='i' declared_type='int'/>
<retval type='f' declared_type='float'/>
</function>
<function name='VP8LFastSLog2' inline='true'>
<arg name='v' type='i' declared_type='int'/>
<retval type='f' declared_type='float'/>
</function>
<function name='VP8LFastSLog2Slow'>
<arg name='v' type='i' declared_type='int'/>
<retval type='f' declared_type='float'/>
</function>
<function name='VP8LFillBitWindow'>
<arg const='true' name='br' type='^{_VP8LBitReader=Q*IIiii}' declared_type='VP8LBitReader*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='VP8LGetInfo'>
<arg const='true' name='data' type='*' declared_type='uint8_t*'/>
<arg name='data_size' type='L' declared_type='size_t'/>
<arg const='true' name='width' type='^i' declared_type='int*'/>
<arg const='true' name='height' type='^i' declared_type='int*'/>
<arg const='true' name='has_alpha' type='^i' declared_type='int*'/>
<retval type='i' declared_type='int'/>
</function>
<function name='VP8LInitBitReader'>
<arg const='true' name='br' type='^{_VP8LBitReader=Q*IIiii}' declared_type='VP8LBitReader*'/>
<arg const='true' name='start' type='*' declared_type='uint8_t*'/>
<arg name='length' type='L' declared_type='size_t'/>
<retval type='v' declared_type='void'/>
</function>
<function name='VP8LInverseTransform'>
<arg const='true' name='transform' type='^{VP8LTransform=iiii^I}' declared_type='struct VP8LTransform*'/>
<arg name='row_start' type='i' declared_type='int'/>
<arg name='row_end' type='i' declared_type='int'/>
<arg const='true' name='in' type='^I' declared_type='uint32_t*'/>
<arg const='true' name='out' type='^I' declared_type='uint32_t*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='VP8LNew'>
<retval type='^{_WebPRescaler=iiiiqiiiiiiiii*i^i^i}' declared_type='VP8LDecoder*'/>
</function>
<function name='VP8LPrefetchBits' inline='true'>
<arg const='true' name='br' type='^{_VP8LBitReader=Q*IIiii}' declared_type='VP8LBitReader*'/>
<retval type='I' declared_type='uint32_t'/>
</function>
<function name='VP8LReadBits'>
<arg const='true' name='br' type='^{_VP8LBitReader=Q*IIiii}' declared_type='VP8LBitReader*'/>
<arg name='n_bits' type='i' declared_type='int'/>
<retval type='I' declared_type='uint32_t'/>
</function>
<function name='VP8LResidualImage'>
<arg name='width' type='i' declared_type='int'/>
<arg name='height' type='i' declared_type='int'/>
<arg name='bits' type='i' declared_type='int'/>
<arg const='true' name='argb' type='^I' declared_type='uint32_t*'/>
<arg const='true' name='argb_scratch' type='^I' declared_type='uint32_t*'/>
<arg const='true' name='image' type='^I' declared_type='uint32_t*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='VP8LSubPixels' inline='true'>
<arg name='a' type='I' declared_type='uint32_t'/>
<arg name='b' type='I' declared_type='uint32_t'/>
<retval type='I' declared_type='uint32_t'/>
</function>
<function name='VP8LSubSampleSize' inline='true'>
<arg name='size' type='I' declared_type='uint32_t'/>
<arg name='sampling_bits' type='I' declared_type='uint32_t'/>
<retval type='I' declared_type='uint32_t'/>
</function>
<function name='VP8LSubtractGreenFromBlueAndRed'>
<arg name='argb_data' type='^I' declared_type='uint32_t*'/>
<arg name='num_pixs' type='i' declared_type='int'/>
<retval type='v' declared_type='void'/>
</function>
<function name='VP8LoadFinalBytes'>
<arg const='true' name='br' type='^{VP8BitReader=**iIIi}' declared_type='VP8BitReader*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='VP8LoadNewBytes' inline='true'>
<arg const='true' name='br' type='^{VP8BitReader=**iIIi}' declared_type='VP8BitReader*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='VP8New'>
<retval type='^{_VP8FInfo=b6b6b1}' declared_type='VP8Decoder*'/>
</function>
<function name='VP8ParseIntraMode'>
<arg const='true' name='br' type='^{VP8BitReader=**iIIi}' declared_type='VP8BitReader*'/>
<arg const='true' name='dec' type='^{_VP8FInfo=b6b6b1}' declared_type='VP8Decoder*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='VP8ParseProba'>
<arg const='true' name='br' type='^{VP8BitReader=**iIIi}' declared_type='VP8BitReader*'/>
<arg const='true' name='dec' type='^{_VP8FInfo=b6b6b1}' declared_type='VP8Decoder*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='VP8ParseQuant'>
<arg const='true' name='dec' type='^{_VP8FInfo=b6b6b1}' declared_type='VP8Decoder*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='VP8ProcessRow'>
<arg const='true' name='dec' type='^{_VP8FInfo=b6b6b1}' declared_type='VP8Decoder*'/>
<arg const='true' name='io' type='^{VP8Io=iiiii***ii^v^?^?^?iI*iiiiiiiii*}' declared_type='VP8Io*'/>
<retval type='i' declared_type='int'/>
</function>
<function name='VP8RGBToU' inline='true'>
<arg name='r' type='i' declared_type='int'/>
<arg name='g' type='i' declared_type='int'/>
<arg name='b' type='i' declared_type='int'/>
<retval type='i' declared_type='int'/>
</function>
<function name='VP8RGBToV' inline='true'>
<arg name='r' type='i' declared_type='int'/>
<arg name='g' type='i' declared_type='int'/>
<arg name='b' type='i' declared_type='int'/>
<retval type='i' declared_type='int'/>
</function>
<function name='VP8RGBToY' inline='true'>
<arg name='r' type='i' declared_type='int'/>
<arg name='g' type='i' declared_type='int'/>
<arg name='b' type='i' declared_type='int'/>
<retval type='i' declared_type='int'/>
</function>
<function name='VP8ReconstructBlock'>
<arg const='true' name='dec' type='^{_VP8FInfo=b6b6b1}' declared_type='VP8Decoder*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='VP8ResetProba'>
<arg const='true' name='proba' type='^{_VP8Proba=[3C][4[8[3[11C]]]]}' declared_type='VP8Proba*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='VP8SetError'>
<arg const='true' name='dec' type='^{_VP8FInfo=b6b6b1}' declared_type='VP8Decoder*'/>
<arg name='error' type='i' declared_type='VP8StatusCode'/>
<arg const='true' name='msg' type='*' declared_type='char*'/>
<retval type='i' declared_type='int'/>
</function>
<function name='VP8Shift' inline='true'>
<arg const='true' name='br' type='^{VP8BitReader=**iIIi}' declared_type='VP8BitReader*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='VP8Status'>
<arg const='true' name='dec' type='^{_VP8FInfo=b6b6b1}' declared_type='VP8Decoder*'/>
<retval type='i' declared_type='VP8StatusCode'/>
</function>
<function name='VP8StatusMessage'>
<arg const='true' name='dec' type='^{_VP8FInfo=b6b6b1}' declared_type='VP8Decoder*'/>
<retval const='true' type='*' declared_type='char*'/>
</function>
<function name='VP8YUVInit'>
<retval type='v' declared_type='void'/>
</function>
<function name='VP8YuvToArgb' inline='true'>
<arg name='y' type='C' declared_type='uint8_t'/>
<arg name='u' type='C' declared_type='uint8_t'/>
<arg name='v' type='C' declared_type='uint8_t'/>
<arg const='true' name='argb' type='*' declared_type='uint8_t*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='VP8YuvToBgr' inline='true'>
<arg name='y' type='C' declared_type='uint8_t'/>
<arg name='u' type='C' declared_type='uint8_t'/>
<arg name='v' type='C' declared_type='uint8_t'/>
<arg const='true' name='bgr' type='*' declared_type='uint8_t*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='VP8YuvToBgra' inline='true'>
<arg name='y' type='C' declared_type='uint8_t'/>
<arg name='u' type='C' declared_type='uint8_t'/>
<arg name='v' type='C' declared_type='uint8_t'/>
<arg const='true' name='bgra' type='*' declared_type='uint8_t*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='VP8YuvToRgb' inline='true'>
<arg name='y' type='C' declared_type='uint8_t'/>
<arg name='u' type='C' declared_type='uint8_t'/>
<arg name='v' type='C' declared_type='uint8_t'/>
<arg const='true' name='rgb' type='*' declared_type='uint8_t*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='VP8YuvToRgb565' inline='true'>
<arg name='y' type='C' declared_type='uint8_t'/>
<arg name='u' type='C' declared_type='uint8_t'/>
<arg name='v' type='C' declared_type='uint8_t'/>
<arg const='true' name='rgb' type='*' declared_type='uint8_t*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='VP8YuvToRgba' inline='true'>
<arg name='y' type='C' declared_type='uint8_t'/>
<arg name='u' type='C' declared_type='uint8_t'/>
<arg name='v' type='C' declared_type='uint8_t'/>
<arg const='true' name='rgba' type='*' declared_type='uint8_t*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='VP8YuvToRgba4444' inline='true'>
<arg name='y' type='C' declared_type='uint8_t'/>
<arg name='u' type='C' declared_type='uint8_t'/>
<arg name='v' type='C' declared_type='uint8_t'/>
<arg const='true' name='argb' type='*' declared_type='uint8_t*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='WebPAllocateDecBuffer'>
<arg name='width' type='i' declared_type='int'/>
<arg name='height' type='i' declared_type='int'/>
<arg const='true' name='options' type='^{WebPDecoderOptions=iiiiiiiiiiiii[6I]}' declared_type='WebPDecoderOptions*'/>
<arg const='true' name='buffer' type='^{WebPDecBuffer=iiii(?={WebPRGBABuffer=*iI}{WebPYUVABuffer=****iiiiIIII})[4I]*}' declared_type='WebPDecBuffer*'/>
<retval type='i' declared_type='VP8StatusCode'/>
</function>
<function name='WebPCopyDecBuffer'>
<arg const='true' name='src' type='^{WebPDecBuffer=iiii(?={WebPRGBABuffer=*iI}{WebPYUVABuffer=****iiiiIIII})[4I]*}' declared_type='WebPDecBuffer*'/>
<arg const='true' name='dst' type='^{WebPDecBuffer=iiii(?={WebPRGBABuffer=*iI}{WebPYUVABuffer=****iiiiIIII})[4I]*}' declared_type='WebPDecBuffer*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='WebPDataClear' inline='true'>
<arg name='webp_data' type='^{WebPData=*I}' declared_type='WebPData*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='WebPDataCopy' inline='true'>
<arg const='true' name='src' type='^{WebPData=*I}' declared_type='WebPData*'/>
<arg name='dst' type='^{WebPData=*I}' declared_type='WebPData*'/>
<retval type='i' declared_type='int'/>
</function>
<function name='WebPDataInit' inline='true'>
<arg name='webp_data' type='^{WebPData=*I}' declared_type='WebPData*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='WebPDecode'>
<arg const='true' name='data' type='*' declared_type='uint8_t*'/>
<arg name='data_size' type='L' declared_type='size_t'/>
<arg name='config' type='^{WebPDecoderConfig={WebPBitstreamFeatures=iiiiiiii[2I]}{WebPDecBuffer=iiii(?={WebPRGBABuffer=*iI}{WebPYUVABuffer=****iiiiIIII})[4I]*}{WebPDecoderOptions=iiiiiiiiiiiii[6I]}}' declared_type='WebPDecoderConfig*'/>
<retval type='i' declared_type='VP8StatusCode'/>
</function>
<function name='WebPDecodeARGB'>
<arg const='true' name='data' type='*' declared_type='uint8_t*'/>
<arg name='data_size' type='L' declared_type='size_t'/>
<arg name='width' type='^i' declared_type='int*'/>
<arg name='height' type='^i' declared_type='int*'/>
<retval type='*' declared_type='uint8_t*'/>
</function>
<function name='WebPDecodeARGBInto'>
<arg const='true' name='data' type='*' declared_type='uint8_t*'/>
<arg name='data_size' type='L' declared_type='size_t'/>
<arg name='output_buffer' type='*' declared_type='uint8_t*'/>
<arg name='output_buffer_size' type='L' declared_type='size_t'/>
<arg name='output_stride' type='i' declared_type='int'/>
<retval type='*' declared_type='uint8_t*'/>
</function>
<function name='WebPDecodeBGR'>
<arg const='true' name='data' type='*' declared_type='uint8_t*'/>
<arg name='data_size' type='L' declared_type='size_t'/>
<arg name='width' type='^i' declared_type='int*'/>
<arg name='height' type='^i' declared_type='int*'/>
<retval type='*' declared_type='uint8_t*'/>
</function>
<function name='WebPDecodeBGRA'>
<arg const='true' name='data' type='*' declared_type='uint8_t*'/>
<arg name='data_size' type='L' declared_type='size_t'/>
<arg name='width' type='^i' declared_type='int*'/>
<arg name='height' type='^i' declared_type='int*'/>
<retval type='*' declared_type='uint8_t*'/>
</function>
<function name='WebPDecodeBGRAInto'>
<arg const='true' name='data' type='*' declared_type='uint8_t*'/>
<arg name='data_size' type='L' declared_type='size_t'/>
<arg name='output_buffer' type='*' declared_type='uint8_t*'/>
<arg name='output_buffer_size' type='L' declared_type='size_t'/>
<arg name='output_stride' type='i' declared_type='int'/>
<retval type='*' declared_type='uint8_t*'/>
</function>
<function name='WebPDecodeBGRInto'>
<arg const='true' name='data' type='*' declared_type='uint8_t*'/>
<arg name='data_size' type='L' declared_type='size_t'/>
<arg name='output_buffer' type='*' declared_type='uint8_t*'/>
<arg name='output_buffer_size' type='L' declared_type='size_t'/>
<arg name='output_stride' type='i' declared_type='int'/>
<retval type='*' declared_type='uint8_t*'/>
</function>
<function name='WebPDecodeRGB'>
<arg const='true' name='data' type='*' declared_type='uint8_t*'/>
<arg name='data_size' type='L' declared_type='size_t'/>
<arg name='width' type='^i' declared_type='int*'/>
<arg name='height' type='^i' declared_type='int*'/>
<retval type='*' declared_type='uint8_t*'/>
</function>
<function name='WebPDecodeRGBA'>
<arg const='true' name='data' type='*' declared_type='uint8_t*'/>
<arg name='data_size' type='L' declared_type='size_t'/>
<arg name='width' type='^i' declared_type='int*'/>
<arg name='height' type='^i' declared_type='int*'/>
<retval type='*' declared_type='uint8_t*'/>
</function>
<function name='WebPDecodeRGBAInto'>
<arg const='true' name='data' type='*' declared_type='uint8_t*'/>
<arg name='data_size' type='L' declared_type='size_t'/>
<arg name='output_buffer' type='*' declared_type='uint8_t*'/>
<arg name='output_buffer_size' type='L' declared_type='size_t'/>
<arg name='output_stride' type='i' declared_type='int'/>
<retval type='*' declared_type='uint8_t*'/>
</function>
<function name='WebPDecodeRGBInto'>
<arg const='true' name='data' type='*' declared_type='uint8_t*'/>
<arg name='data_size' type='L' declared_type='size_t'/>
<arg name='output_buffer' type='*' declared_type='uint8_t*'/>
<arg name='output_buffer_size' type='L' declared_type='size_t'/>
<arg name='output_stride' type='i' declared_type='int'/>
<retval type='*' declared_type='uint8_t*'/>
</function>
<function name='WebPDecodeYUV'>
<arg const='true' name='data' type='*' declared_type='uint8_t*'/>
<arg name='data_size' type='L' declared_type='size_t'/>
<arg name='width' type='^i' declared_type='int*'/>
<arg name='height' type='^i' declared_type='int*'/>
<arg name='u' type='^*' declared_type='uint8_t**'/>
<arg name='v' type='^*' declared_type='uint8_t**'/>
<arg name='stride' type='^i' declared_type='int*'/>
<arg name='uv_stride' type='^i' declared_type='int*'/>
<retval type='*' declared_type='uint8_t*'/>
</function>
<function name='WebPDecodeYUVInto'>
<arg const='true' name='data' type='*' declared_type='uint8_t*'/>
<arg name='data_size' type='L' declared_type='size_t'/>
<arg name='luma' type='*' declared_type='uint8_t*'/>
<arg name='luma_size' type='L' declared_type='size_t'/>
<arg name='luma_stride' type='i' declared_type='int'/>
<arg name='u' type='*' declared_type='uint8_t*'/>
<arg name='u_size' type='L' declared_type='size_t'/>
<arg name='u_stride' type='i' declared_type='int'/>
<arg name='v' type='*' declared_type='uint8_t*'/>
<arg name='v_size' type='L' declared_type='size_t'/>
<arg name='v_stride' type='i' declared_type='int'/>
<retval type='*' declared_type='uint8_t*'/>
</function>
<function name='WebPFreeDecBuffer'>
<arg name='buffer' type='^{WebPDecBuffer=iiii(?={WebPRGBABuffer=*iI}{WebPYUVABuffer=****iiiiIIII})[4I]*}' declared_type='WebPDecBuffer*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='WebPGetDecoderVersion'>
<retval type='i' declared_type='int'/>
</function>
<function name='WebPGetFeatures' inline='true'>
<arg const='true' name='data' type='*' declared_type='uint8_t*'/>
<arg name='data_size' type='L' declared_type='size_t'/>
<arg name='features' type='^{WebPBitstreamFeatures=iiiiiiii[2I]}' declared_type='WebPBitstreamFeatures*'/>
<retval type='i' declared_type='VP8StatusCode'/>
</function>
<function name='WebPGetFeaturesInternal'>
<arg const='true' type='*' declared_type='uint8_t*'/>
<arg type='L' declared_type='size_t'/>
<arg type='^{WebPBitstreamFeatures=iiiiiiii[2I]}' declared_type='WebPBitstreamFeatures*'/>
<arg type='i' declared_type='int'/>
<retval type='i' declared_type='VP8StatusCode'/>
</function>
<function name='WebPGetInfo'>
<arg const='true' name='data' type='*' declared_type='uint8_t*'/>
<arg name='data_size' type='L' declared_type='size_t'/>
<arg name='width' type='^i' declared_type='int*'/>
<arg name='height' type='^i' declared_type='int*'/>
<retval type='i' declared_type='int'/>
</function>
<function name='WebPGetLinePairConverter'>
<arg name='alpha_is_last' type='i' declared_type='int'/>
<retval type='^?' declared_type='WebPUpsampleLinePairFunc' function_pointer='true'>
<arg const='true' type='*' declared_type='uint8_t*'/>
<arg const='true' type='*' declared_type='uint8_t*'/>
<arg const='true' type='*' declared_type='uint8_t*'/>
<arg const='true' type='*' declared_type='uint8_t*'/>
<arg const='true' type='*' declared_type='uint8_t*'/>
<arg const='true' type='*' declared_type='uint8_t*'/>
<arg type='*' declared_type='uint8_t*'/>
<arg type='*' declared_type='uint8_t*'/>
<arg type='i' declared_type='int'/>
<retval type='v' declared_type='void'/>
</retval>
</function>
<function name='WebPGrabDecBuffer'>
<arg const='true' name='src' type='^{WebPDecBuffer=iiii(?={WebPRGBABuffer=*iI}{WebPYUVABuffer=****iiiiIIII})[4I]*}' declared_type='WebPDecBuffer*'/>
<arg const='true' name='dst' type='^{WebPDecBuffer=iiii(?={WebPRGBABuffer=*iI}{WebPYUVABuffer=****iiiiIIII})[4I]*}' declared_type='WebPDecBuffer*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='WebPIAppend'>
<arg name='idec' type='^{WebPIDecoder=}' declared_type='WebPIDecoder*'/>
<arg const='true' name='data' type='*' declared_type='uint8_t*'/>
<arg name='data_size' type='L' declared_type='size_t'/>
<retval type='i' declared_type='VP8StatusCode'/>
</function>
<function name='WebPIDecGetRGB'>
<arg const='true' name='idec' type='^{WebPIDecoder=}' declared_type='WebPIDecoder*'/>
<arg name='last_y' type='^i' declared_type='int*'/>
<arg name='width' type='^i' declared_type='int*'/>
<arg name='height' type='^i' declared_type='int*'/>
<arg name='stride' type='^i' declared_type='int*'/>
<retval type='*' declared_type='uint8_t*'/>
</function>
<function name='WebPIDecGetYUV' inline='true'>
<arg const='true' name='idec' type='^{WebPIDecoder=}' declared_type='WebPIDecoder*'/>
<arg name='last_y' type='^i' declared_type='int*'/>
<arg name='u' type='^*' declared_type='uint8_t**'/>
<arg name='v' type='^*' declared_type='uint8_t**'/>
<arg name='width' type='^i' declared_type='int*'/>
<arg name='height' type='^i' declared_type='int*'/>
<arg name='stride' type='^i' declared_type='int*'/>
<arg name='uv_stride' type='^i' declared_type='int*'/>
<retval type='*' declared_type='uint8_t*'/>
</function>
<function name='WebPIDecGetYUVA'>
<arg const='true' name='idec' type='^{WebPIDecoder=}' declared_type='WebPIDecoder*'/>
<arg name='last_y' type='^i' declared_type='int*'/>
<arg name='u' type='^*' declared_type='uint8_t**'/>
<arg name='v' type='^*' declared_type='uint8_t**'/>
<arg name='a' type='^*' declared_type='uint8_t**'/>
<arg name='width' type='^i' declared_type='int*'/>
<arg name='height' type='^i' declared_type='int*'/>
<arg name='stride' type='^i' declared_type='int*'/>
<arg name='uv_stride' type='^i' declared_type='int*'/>
<arg name='a_stride' type='^i' declared_type='int*'/>
<retval type='*' declared_type='uint8_t*'/>
</function>
<function name='WebPIDecode'>
<arg const='true' name='data' type='*' declared_type='uint8_t*'/>
<arg name='data_size' type='L' declared_type='size_t'/>
<arg name='config' type='^{WebPDecoderConfig={WebPBitstreamFeatures=iiiiiiii[2I]}{WebPDecBuffer=iiii(?={WebPRGBABuffer=*iI}{WebPYUVABuffer=****iiiiIIII})[4I]*}{WebPDecoderOptions=iiiiiiiiiiiii[6I]}}' declared_type='WebPDecoderConfig*'/>
<retval type='^{WebPIDecoder=}' declared_type='WebPIDecoder*'/>
</function>
<function name='WebPIDecodedArea'>
<arg const='true' name='idec' type='^{WebPIDecoder=}' declared_type='WebPIDecoder*'/>
<arg name='left' type='^i' declared_type='int*'/>
<arg name='top' type='^i' declared_type='int*'/>
<arg name='width' type='^i' declared_type='int*'/>
<arg name='height' type='^i' declared_type='int*'/>
<retval const='true' type='^{WebPDecBuffer=iiii(?={WebPRGBABuffer=*iI}{WebPYUVABuffer=****iiiiIIII})[4I]*}' declared_type='WebPDecBuffer*'/>
</function>
<function name='WebPIDelete'>
<arg name='idec' type='^{WebPIDecoder=}' declared_type='WebPIDecoder*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='WebPINewDecoder'>
<arg name='output_buffer' type='^{WebPDecBuffer=iiii(?={WebPRGBABuffer=*iI}{WebPYUVABuffer=****iiiiIIII})[4I]*}' declared_type='WebPDecBuffer*'/>
<retval type='^{WebPIDecoder=}' declared_type='WebPIDecoder*'/>
</function>
<function name='WebPINewRGB'>
<arg name='csp' type='i' declared_type='WEBP_CSP_MODE'/>
<arg name='output_buffer' type='*' declared_type='uint8_t*'/>
<arg name='output_buffer_size' type='L' declared_type='size_t'/>
<arg name='output_stride' type='i' declared_type='int'/>
<retval type='^{WebPIDecoder=}' declared_type='WebPIDecoder*'/>
</function>
<function name='WebPINewYUV'>
<arg name='luma' type='*' declared_type='uint8_t*'/>
<arg name='luma_size' type='L' declared_type='size_t'/>
<arg name='luma_stride' type='i' declared_type='int'/>
<arg name='u' type='*' declared_type='uint8_t*'/>
<arg name='u_size' type='L' declared_type='size_t'/>
<arg name='u_stride' type='i' declared_type='int'/>
<arg name='v' type='*' declared_type='uint8_t*'/>
<arg name='v_size' type='L' declared_type='size_t'/>
<arg name='v_stride' type='i' declared_type='int'/>
<retval type='^{WebPIDecoder=}' declared_type='WebPIDecoder*'/>
</function>
<function name='WebPINewYUVA'>
<arg name='luma' type='*' declared_type='uint8_t*'/>
<arg name='luma_size' type='L' declared_type='size_t'/>
<arg name='luma_stride' type='i' declared_type='int'/>
<arg name='u' type='*' declared_type='uint8_t*'/>
<arg name='u_size' type='L' declared_type='size_t'/>
<arg name='u_stride' type='i' declared_type='int'/>
<arg name='v' type='*' declared_type='uint8_t*'/>
<arg name='v_size' type='L' declared_type='size_t'/>
<arg name='v_stride' type='i' declared_type='int'/>
<arg name='a' type='*' declared_type='uint8_t*'/>
<arg name='a_size' type='L' declared_type='size_t'/>
<arg name='a_stride' type='i' declared_type='int'/>
<retval type='^{WebPIDecoder=}' declared_type='WebPIDecoder*'/>
</function>
<function name='WebPISetIOHooks'>
<arg const='true' name='idec' type='^{WebPIDecoder=}' declared_type='WebPIDecoder*'/>
<arg name='put' type='^?' declared_type='VP8IoPutHook' function_pointer='true'>
<arg const='true' type='^{VP8Io=iiiii***ii^v^?^?^?iI*iiiiiiiii*}' declared_type='VP8Io*'/>
<retval type='i' declared_type='int'/>
</arg>
<arg name='setup' type='^?' declared_type='VP8IoSetupHook' function_pointer='true'>
<arg type='^{VP8Io=iiiii***ii^v^?^?^?iI*iiiiiiiii*}' declared_type='VP8Io*'/>
<retval type='i' declared_type='int'/>
</arg>
<arg name='teardown' type='^?' declared_type='VP8IoTeardownHook' function_pointer='true'>
<arg const='true' type='^{VP8Io=iiiii***ii^v^?^?^?iI*iiiiiiiii*}' declared_type='VP8Io*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg name='user_data' type='^v' declared_type='void*'/>
<retval type='i' declared_type='int'/>
</function>
<function name='WebPIUpdate'>
<arg name='idec' type='^{WebPIDecoder=}' declared_type='WebPIDecoder*'/>
<arg const='true' name='data' type='*' declared_type='uint8_t*'/>
<arg name='data_size' type='L' declared_type='size_t'/>
<retval type='i' declared_type='VP8StatusCode'/>
</function>
<function name='WebPInitCustomIo'>
<arg const='true' name='params' type='^{WebPDecParams=^{WebPDecBuffer=iiii(?={WebPRGBABuffer=*iI}{WebPYUVABuffer=****iiiiIIII})[4I]*}***i^{WebPDecoderOptions=iiiiiiiiiiiii[6I]}{_WebPRescaler=iiiiqiiiiiiiii*i^i^i}{_WebPRescaler=iiiiqiiiiiiiii*i^i^i}{_WebPRescaler=iiiiqiiiiiiiii*i^i^i}{_WebPRescaler=iiiiqiiiiiiiii*i^i^i}^v^?^?^?}' declared_type='WebPDecParams*'/>
<arg const='true' name='io' type='^{VP8Io=iiiii***ii^v^?^?^?iI*iiiiiiiii*}' declared_type='VP8Io*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='WebPInitDecBuffer' inline='true'>
<arg name='buffer' type='^{WebPDecBuffer=iiii(?={WebPRGBABuffer=*iI}{WebPYUVABuffer=****iiiiIIII})[4I]*}' declared_type='WebPDecBuffer*'/>
<retval type='i' declared_type='int'/>
</function>
<function name='WebPInitDecBufferInternal'>
<arg type='^{WebPDecBuffer=iiii(?={WebPRGBABuffer=*iI}{WebPYUVABuffer=****iiiiIIII})[4I]*}' declared_type='WebPDecBuffer*'/>
<arg type='i' declared_type='int'/>
<retval type='i' declared_type='int'/>
</function>
<function name='WebPInitDecoderConfig' inline='true'>
<arg name='config' type='^{WebPDecoderConfig={WebPBitstreamFeatures=iiiiiiii[2I]}{WebPDecBuffer=iiii(?={WebPRGBABuffer=*iI}{WebPYUVABuffer=****iiiiIIII})[4I]*}{WebPDecoderOptions=iiiiiiiiiiiii[6I]}}' declared_type='WebPDecoderConfig*'/>
<retval type='i' declared_type='int'/>
</function>
<function name='WebPInitDecoderConfigInternal'>
<arg type='^{WebPDecoderConfig={WebPBitstreamFeatures=iiiiiiii[2I]}{WebPDecBuffer=iiii(?={WebPRGBABuffer=*iI}{WebPYUVABuffer=****iiiiIIII})[4I]*}{WebPDecoderOptions=iiiiiiiiiiiii[6I]}}' declared_type='WebPDecoderConfig*'/>
<arg type='i' declared_type='int'/>
<retval type='i' declared_type='int'/>
</function>
<function name='WebPInitPremultiply'>
<retval type='v' declared_type='void'/>
</function>
<function name='WebPInitPremultiplyNEON'>
<retval type='v' declared_type='void'/>
</function>
<function name='WebPInitPremultiplySSE2'>
<retval type='v' declared_type='void'/>
</function>
<function name='WebPInitUpsamplers'>
<retval type='v' declared_type='void'/>
</function>
<function name='WebPInitUpsamplersNEON'>
<retval type='v' declared_type='void'/>
</function>
<function name='WebPInitUpsamplersSSE2'>
<retval type='v' declared_type='void'/>
</function>
<function name='WebPIoInitFromOptions'>
<arg const='true' name='options' type='^{WebPDecoderOptions=iiiiiiiiiiiii[6I]}' declared_type='WebPDecoderOptions*'/>
<arg const='true' name='io' type='^{VP8Io=iiiii***ii^v^?^?^?iI*iiiiiiiii*}' declared_type='VP8Io*'/>
<arg name='src_colorspace' type='i' declared_type='WEBP_CSP_MODE'/>
<retval type='i' declared_type='int'/>
</function>
<function name='WebPIsAlphaMode' inline='true'>
<arg name='mode' type='i' declared_type='WEBP_CSP_MODE'/>
<retval type='i' declared_type='int'/>
</function>
<function name='WebPIsPremultipliedMode' inline='true'>
<arg name='mode' type='i' declared_type='WEBP_CSP_MODE'/>
<retval type='i' declared_type='int'/>
</function>
<function name='WebPIsRGBMode' inline='true'>
<arg name='mode' type='i' declared_type='WEBP_CSP_MODE'/>
<retval type='i' declared_type='int'/>
</function>
<function name='WebPParseHeaders'>
<arg const='true' name='headers' type='^{_WebPHeaderStructure=*II*IIIi}' declared_type='WebPHeaderStructure*'/>
<retval type='i' declared_type='VP8StatusCode'/>
</function>
<function name='WebPRescalerExport'>
<arg const='true' name='wrk' type='^{_WebPRescaler=iiiiqiiiiiiiii*i^i^i}' declared_type='WebPRescaler*'/>
<retval type='i' declared_type='int'/>
</function>
<function name='WebPRescalerExportRow'>
<arg const='true' name='wrk' type='^{_WebPRescaler=iiiiqiiiiiiiii*i^i^i}' declared_type='WebPRescaler*'/>
<retval type='*' declared_type='uint8_t*'/>
</function>
<function name='WebPRescalerHasPendingOutput' inline='true'>
<arg const='true' name='rescaler' type='^{_WebPRescaler=iiiiqiiiiiiiii*i^i^i}' declared_type='WebPRescaler*'/>
<retval type='i' declared_type='int'/>
</function>
<function name='WebPRescalerImport'>
<arg const='true' name='rescaler' type='^{_WebPRescaler=iiiiqiiiiiiiii*i^i^i}' declared_type='WebPRescaler*'/>
<arg name='num_rows' type='i' declared_type='int'/>
<arg const='true' name='src' type='*' declared_type='uint8_t*'/>
<arg name='src_stride' type='i' declared_type='int'/>
<retval type='i' declared_type='int'/>
</function>
<function name='WebPRescalerImportRow'>
<arg const='true' name='rescaler' type='^{_WebPRescaler=iiiiqiiiiiiiii*i^i^i}' declared_type='WebPRescaler*'/>
<arg const='true' name='src' type='*' declared_type='uint8_t*'/>
<arg name='channel' type='i' declared_type='int'/>
<retval type='v' declared_type='void'/>
</function>
<function name='WebPRescalerInit'>
<arg const='true' name='wrk' type='^{_WebPRescaler=iiiiqiiiiiiiii*i^i^i}' declared_type='WebPRescaler*'/>
<arg name='src_width' type='i' declared_type='int'/>
<arg name='src_height' type='i' declared_type='int'/>
<arg const='true' name='dst' type='*' declared_type='uint8_t*'/>
<arg name='dst_width' type='i' declared_type='int'/>
<arg name='dst_height' type='i' declared_type='int'/>
<arg name='dst_stride' type='i' declared_type='int'/>
<arg name='num_channels' type='i' declared_type='int'/>
<arg name='x_add' type='i' declared_type='int'/>
<arg name='x_sub' type='i' declared_type='int'/>
<arg name='y_add' type='i' declared_type='int'/>
<arg name='y_sub' type='i' declared_type='int'/>
<arg const='true' name='work' type='^i' declared_type='int32_t*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='WebPResetDecParams'>
<arg const='true' name='params' type='^{WebPDecParams=^{WebPDecBuffer=iiii(?={WebPRGBABuffer=*iI}{WebPYUVABuffer=****iiiiIIII})[4I]*}***i^{WebPDecoderOptions=iiiiiiiiiiiii[6I]}{_WebPRescaler=iiiiqiiiiiiiii*i^i^i}{_WebPRescaler=iiiiqiiiiiiiii*i^i^i}{_WebPRescaler=iiiiqiiiiiiiii*i^i^i}{_WebPRescaler=iiiiqiiiiiiiii*i^i^i}^v^?^?^?}' declared_type='WebPDecParams*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='WebPSafeCalloc'>
<arg name='nmemb' type='Q' declared_type='uint64_t'/>
<arg name='size' type='L' declared_type='size_t'/>
<retval type='^v' declared_type='void*'/>
</function>
<function name='WebPSafeMalloc'>
<arg name='nmemb' type='Q' declared_type='uint64_t'/>
<arg name='size' type='L' declared_type='size_t'/>
<retval type='^v' declared_type='void*'/>
</function>
<function name='WebPWorkerEnd'>
<arg const='true' name='worker' type='^{_WebPWorker=i^?^v^vi}' declared_type='WebPWorker*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='WebPWorkerInit'>
<arg const='true' name='worker' type='^{_WebPWorker=i^?^v^vi}' declared_type='WebPWorker*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='WebPWorkerLaunch'>
<arg const='true' name='worker' type='^{_WebPWorker=i^?^v^vi}' declared_type='WebPWorker*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='WebPWorkerReset'>
<arg const='true' name='worker' type='^{_WebPWorker=i^?^v^vi}' declared_type='WebPWorker*'/>
<retval type='i' declared_type='int'/>
</function>
<function name='WebPWorkerSync'>
<arg const='true' name='worker' type='^{_WebPWorker=i^?^v^vi}' declared_type='WebPWorker*'/>
<retval type='i' declared_type='int'/>
</function>
<class name='IISideController'>
<method selector='autoConstrainedSideControllerWithViewController:' class_method='true'>
<arg name='controller' type='@' declared_type='UIViewController*' index='0'/>
<retval type='@' declared_type='IISideController*'/>
</method>
<method selector='constrainedSize'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='initWithViewController:constrained:'>
<arg name='controller' type='@' declared_type='UIViewController*' index='0'/>
<arg name='constrainedSize' type='f' declared_type='CGFloat' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='setConstrainedSize:'>
<arg name='constrainedSize' type='f' declared_type='CGFloat' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='shrinkSide'>
<retval type='v' declared_type='void'/>
</method>
<method selector='shrinkSideAnimated:'>
<arg name='animated' type='B' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='sideControllerWithViewController:constrained:' class_method='true'>
<arg name='controller' type='@' declared_type='UIViewController*' index='0'/>
<arg name='constrainedSize' type='f' declared_type='CGFloat' index='1'/>
<retval type='@' declared_type='IISideController*'/>
</method>
</class>
<class name='IIViewDeckController'>
<method selector='automaticallyUpdateTabBarItems'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='bottomController'>
<retval type='@' declared_type='UIViewController*'/>
</method>
<method selector='bottomLedgeSize'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='bottomSize'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='bottomViewSize'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='bounceDurationFactor'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='bounceOpenSideDurationFactor'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='canPanOverViewsOfClass:'>
<arg name='viewClass' type='#' declared_type='Class' index='0'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='canRightViewPushViewControllerOverCenterController'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='centerController'>
<retval type='@' declared_type='UIViewController*'/>
</method>
<method selector='centerTapperAccessibilityHint'>
<retval type='@' declared_type='NSString*'/>
</method>
<method selector='centerTapperAccessibilityLabel'>
<retval type='@' declared_type='NSString*'/>
</method>
<method selector='centerViewCornerRadius'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='centerViewOpacity'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='centerhiddenInteractivity'>
<retval type='L' declared_type='IIViewDeckCenterHiddenInteractivity'/>
</method>
<method selector='closeBottomView'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='closeBottomViewAnimated:'>
<arg name='animated' type='B' declared_type='BOOL' index='0'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='closeBottomViewAnimated:completion:'>
<arg name='animated' type='B' declared_type='BOOL' index='0'/>
<arg name='completed' type='@?' declared_type='IIViewDeckControllerBlock' index='1' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<arg type='B' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='closeBottomViewAnimated:duration:completion:'>
<arg name='animated' type='B' declared_type='BOOL' index='0'/>
<arg name='duration' type='d' declared_type='NSTimeInterval' index='1'/>
<arg name='completed' type='@?' declared_type='IIViewDeckControllerBlock' index='2' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<arg type='B' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='closeBottomViewBouncing:'>
<arg name='bounced' type='@?' declared_type='IIViewDeckControllerBounceBlock' index='0' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='closeBottomViewBouncing:completion:'>
<arg name='bounced' type='@?' declared_type='IIViewDeckControllerBounceBlock' index='0' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg name='completed' type='@?' declared_type='IIViewDeckControllerBlock' index='1' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<arg type='B' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='closeLeftView'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='closeLeftViewAnimated:'>
<arg name='animated' type='B' declared_type='BOOL' index='0'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='closeLeftViewAnimated:completion:'>
<arg name='animated' type='B' declared_type='BOOL' index='0'/>
<arg name='completed' type='@?' declared_type='IIViewDeckControllerBlock' index='1' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<arg type='B' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='closeLeftViewAnimated:duration:completion:'>
<arg name='animated' type='B' declared_type='BOOL' index='0'/>
<arg name='duration' type='d' declared_type='NSTimeInterval' index='1'/>
<arg name='completed' type='@?' declared_type='IIViewDeckControllerBlock' index='2' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<arg type='B' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='closeLeftViewBouncing:'>
<arg name='bounced' type='@?' declared_type='IIViewDeckControllerBounceBlock' index='0' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='closeLeftViewBouncing:completion:'>
<arg name='bounced' type='@?' declared_type='IIViewDeckControllerBounceBlock' index='0' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg name='completed' type='@?' declared_type='IIViewDeckControllerBlock' index='1' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<arg type='B' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='closeOpenView'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='closeOpenViewAnimated:'>
<arg name='animated' type='B' declared_type='BOOL' index='0'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='closeOpenViewAnimated:completion:'>
<arg name='animated' type='B' declared_type='BOOL' index='0'/>
<arg name='completed' type='@?' declared_type='IIViewDeckControllerBlock' index='1' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<arg type='B' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='closeOpenViewAnimated:duration:completion:'>
<arg name='animated' type='B' declared_type='BOOL' index='0'/>
<arg name='duration' type='d' declared_type='NSTimeInterval' index='1'/>
<arg name='completed' type='@?' declared_type='IIViewDeckControllerBlock' index='2' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<arg type='B' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='closeOpenViewBouncing:'>
<arg name='bounced' type='@?' declared_type='IIViewDeckControllerBounceBlock' index='0' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='closeOpenViewBouncing:completion:'>
<arg name='bounced' type='@?' declared_type='IIViewDeckControllerBounceBlock' index='0' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg name='completed' type='@?' declared_type='IIViewDeckControllerBlock' index='1' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<arg type='B' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='closeRightView'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='closeRightViewAnimated:'>
<arg name='animated' type='B' declared_type='BOOL' index='0'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='closeRightViewAnimated:completion:'>
<arg name='animated' type='B' declared_type='BOOL' index='0'/>
<arg name='completed' type='@?' declared_type='IIViewDeckControllerBlock' index='1' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<arg type='B' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='closeRightViewAnimated:duration:completion:'>
<arg name='animated' type='B' declared_type='BOOL' index='0'/>
<arg name='duration' type='d' declared_type='NSTimeInterval' index='1'/>
<arg name='completed' type='@?' declared_type='IIViewDeckControllerBlock' index='2' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<arg type='B' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='closeRightViewBouncing:'>
<arg name='bounced' type='@?' declared_type='IIViewDeckControllerBounceBlock' index='0' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='closeRightViewBouncing:completion:'>
<arg name='bounced' type='@?' declared_type='IIViewDeckControllerBounceBlock' index='0' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg name='completed' type='@?' declared_type='IIViewDeckControllerBlock' index='1' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<arg type='B' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='closeSlideAnimationDuration'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='closeTopView'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='closeTopViewAnimated:'>
<arg name='animated' type='B' declared_type='BOOL' index='0'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='closeTopViewAnimated:completion:'>
<arg name='animated' type='B' declared_type='BOOL' index='0'/>
<arg name='completed' type='@?' declared_type='IIViewDeckControllerBlock' index='1' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<arg type='B' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='closeTopViewAnimated:duration:completion:'>
<arg name='animated' type='B' declared_type='BOOL' index='0'/>
<arg name='duration' type='d' declared_type='NSTimeInterval' index='1'/>
<arg name='completed' type='@?' declared_type='IIViewDeckControllerBlock' index='2' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<arg type='B' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='closeTopViewBouncing:'>
<arg name='bounced' type='@?' declared_type='IIViewDeckControllerBounceBlock' index='0' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='closeTopViewBouncing:completion:'>
<arg name='bounced' type='@?' declared_type='IIViewDeckControllerBounceBlock' index='0' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg name='completed' type='@?' declared_type='IIViewDeckControllerBlock' index='1' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<arg type='B' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='controllers'>
<retval type='@' declared_type='NSArray*'/>
</method>
<method selector='delegate'>
<retval type='@' declared_type='id'/>
</method>
<method selector='delegateMode'>
<retval type='L' declared_type='IIViewDeckDelegateMode'/>
</method>
<method selector='disablePanOverViewsOfClass:'>
<arg name='viewClass' type='#' declared_type='Class' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='enablePanOverViewsOfClass:'>
<arg name='viewClass' type='#' declared_type='Class' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='initWithCenterViewController:'>
<arg name='centerController' type='@' declared_type='UIViewController*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithCenterViewController:bottomViewController:'>
<arg name='centerController' type='@' declared_type='UIViewController*' index='0'/>
<arg name='bottomController' type='@' declared_type='UIViewController*' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithCenterViewController:leftViewController:'>
<arg name='centerController' type='@' declared_type='UIViewController*' index='0'/>
<arg name='leftController' type='@' declared_type='UIViewController*' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithCenterViewController:leftViewController:rightViewController:'>
<arg name='centerController' type='@' declared_type='UIViewController*' index='0'/>
<arg name='leftController' type='@' declared_type='UIViewController*' index='1'/>
<arg name='rightController' type='@' declared_type='UIViewController*' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithCenterViewController:leftViewController:rightViewController:topViewController:bottomViewController:'>
<arg name='centerController' type='@' declared_type='UIViewController*' index='0'/>
<arg name='leftController' type='@' declared_type='UIViewController*' index='1'/>
<arg name='rightController' type='@' declared_type='UIViewController*' index='2'/>
<arg name='topController' type='@' declared_type='UIViewController*' index='3'/>
<arg name='bottomController' type='@' declared_type='UIViewController*' index='4'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithCenterViewController:rightViewController:'>
<arg name='centerController' type='@' declared_type='UIViewController*' index='0'/>
<arg name='rightController' type='@' declared_type='UIViewController*' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithCenterViewController:topViewController:'>
<arg name='centerController' type='@' declared_type='UIViewController*' index='0'/>
<arg name='topController' type='@' declared_type='UIViewController*' index='1'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithCenterViewController:topViewController:bottomViewController:'>
<arg name='centerController' type='@' declared_type='UIViewController*' index='0'/>
<arg name='topController' type='@' declared_type='UIViewController*' index='1'/>
<arg name='bottomController' type='@' declared_type='UIViewController*' index='2'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='isAnySideOpen'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='isElastic'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='isEnabled'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='isSideClosed:'>
<arg name='viewDeckSide' type='L' declared_type='IIViewDeckSide' index='0'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='isSideOpen:'>
<arg name='viewDeckSide' type='L' declared_type='IIViewDeckSide' index='0'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='leftController'>
<retval type='@' declared_type='UIViewController*'/>
</method>
<method selector='leftLedgeSize'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='leftSize'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='leftViewSize'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='maxSize'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='navigationControllerBehavior'>
<retval type='L' declared_type='IIViewDeckNavigationControllerBehavior'/>
</method>
<method selector='openBottomView'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='openBottomViewAnimated:'>
<arg name='animated' type='B' declared_type='BOOL' index='0'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='openBottomViewAnimated:completion:'>
<arg name='animated' type='B' declared_type='BOOL' index='0'/>
<arg name='completed' type='@?' declared_type='IIViewDeckControllerBlock' index='1' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<arg type='B' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='openBottomViewBouncing:'>
<arg name='bounced' type='@?' declared_type='IIViewDeckControllerBounceBlock' index='0' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='openBottomViewBouncing:completion:'>
<arg name='bounced' type='@?' declared_type='IIViewDeckControllerBounceBlock' index='0' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg name='completed' type='@?' declared_type='IIViewDeckControllerBlock' index='1' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<arg type='B' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='openLeftView'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='openLeftViewAnimated:'>
<arg name='animated' type='B' declared_type='BOOL' index='0'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='openLeftViewAnimated:completion:'>
<arg name='animated' type='B' declared_type='BOOL' index='0'/>
<arg name='completed' type='@?' declared_type='IIViewDeckControllerBlock' index='1' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<arg type='B' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='openLeftViewBouncing:'>
<arg name='bounced' type='@?' declared_type='IIViewDeckControllerBounceBlock' index='0' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='openLeftViewBouncing:completion:'>
<arg name='bounced' type='@?' declared_type='IIViewDeckControllerBounceBlock' index='0' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg name='completed' type='@?' declared_type='IIViewDeckControllerBlock' index='1' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<arg type='B' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='openRightView'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='openRightViewAnimated:'>
<arg name='animated' type='B' declared_type='BOOL' index='0'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='openRightViewAnimated:completion:'>
<arg name='animated' type='B' declared_type='BOOL' index='0'/>
<arg name='completed' type='@?' declared_type='IIViewDeckControllerBlock' index='1' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<arg type='B' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='openRightViewBouncing:'>
<arg name='bounced' type='@?' declared_type='IIViewDeckControllerBounceBlock' index='0' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='openRightViewBouncing:completion:'>
<arg name='bounced' type='@?' declared_type='IIViewDeckControllerBounceBlock' index='0' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg name='completed' type='@?' declared_type='IIViewDeckControllerBlock' index='1' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<arg type='B' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='openSlideAnimationDuration'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='openTopView'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='openTopViewAnimated:'>
<arg name='animated' type='B' declared_type='BOOL' index='0'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='openTopViewAnimated:completion:'>
<arg name='animated' type='B' declared_type='BOOL' index='0'/>
<arg name='completed' type='@?' declared_type='IIViewDeckControllerBlock' index='1' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<arg type='B' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='openTopViewBouncing:'>
<arg name='bounced' type='@?' declared_type='IIViewDeckControllerBounceBlock' index='0' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='openTopViewBouncing:completion:'>
<arg name='bounced' type='@?' declared_type='IIViewDeckControllerBounceBlock' index='0' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg name='completed' type='@?' declared_type='IIViewDeckControllerBlock' index='1' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<arg type='B' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='panningCancelsTouchesInView'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='panningGestureDelegate'>
<retval type='@' declared_type='id'/>
</method>
<method selector='panningMode'>
<retval type='L' declared_type='IIViewDeckPanningMode'/>
</method>
<method selector='panningView'>
<retval type='@' declared_type='UIView*'/>
</method>
<method selector='parallaxAmount'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='previewBounceView:'>
<arg name='viewDeckSide' type='L' declared_type='IIViewDeckSide' index='0'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='previewBounceView:toDistance:duration:callDelegate:completion:'>
<arg name='viewDeckSide' type='L' declared_type='IIViewDeckSide' index='0'/>
<arg name='distance' type='f' declared_type='CGFloat' index='1'/>
<arg name='duration' type='d' declared_type='NSTimeInterval' index='2'/>
<arg name='callDelegate' type='B' declared_type='BOOL' index='3'/>
<arg name='completed' type='@?' declared_type='IIViewDeckControllerBlock' index='4' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<arg type='B' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='previewBounceView:toDistance:duration:numberOfBounces:dampingFactor:callDelegate:completion:'>
<arg name='viewDeckSide' type='L' declared_type='IIViewDeckSide' index='0'/>
<arg name='distance' type='f' declared_type='CGFloat' index='1'/>
<arg name='duration' type='d' declared_type='NSTimeInterval' index='2'/>
<arg name='numberOfBounces' type='f' declared_type='CGFloat' index='3'/>
<arg name='zeta' type='f' declared_type='CGFloat' index='4'/>
<arg name='callDelegate' type='B' declared_type='BOOL' index='5'/>
<arg name='completed' type='@?' declared_type='IIViewDeckControllerBlock' index='6' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<arg type='B' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='previewBounceView:withCompletion:'>
<arg name='viewDeckSide' type='L' declared_type='IIViewDeckSide' index='0'/>
<arg name='completed' type='@?' declared_type='IIViewDeckControllerBlock' index='1' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<arg type='B' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='resizesCenterView'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='rightController'>
<retval type='@' declared_type='UIViewController*'/>
</method>
<method selector='rightLedgeSize'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='rightSize'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='rightViewPushViewControllerOverCenterController:'>
<arg name='controller' type='@' declared_type='UIViewController*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='rightViewSize'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='setAutomaticallyUpdateTabBarItems:'>
<arg name='automaticallyUpdateTabBarItems' type='B' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setBottomController:'>
<arg name='bottomController' type='@' declared_type='UIViewController*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setBottomSize:'>
<arg name='bottomSize' type='f' declared_type='CGFloat' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setBottomSize:completion:'>
<arg name='rightSize' type='f' declared_type='CGFloat' index='0'/>
<arg name='completion' type='@?' declared_type='void (^)(BOOL)' index='1' function_pointer='true'>
<arg type='B' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
<method selector='setBounceDurationFactor:'>
<arg name='bounceDurationFactor' type='f' declared_type='CGFloat' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setBounceOpenSideDurationFactor:'>
<arg name='bounceOpenSideDurationFactor' type='f' declared_type='CGFloat' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setCenterController:'>
<arg name='centerController' type='@' declared_type='UIViewController*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setCenterTapperAccessibilityHint:'>
<arg name='centerTapperAccessibilityHint' type='@' declared_type='NSString*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setCenterTapperAccessibilityLabel:'>
<arg name='centerTapperAccessibilityLabel' type='@' declared_type='NSString*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setCenterViewCornerRadius:'>
<arg name='centerViewCornerRadius' type='f' declared_type='CGFloat' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setCenterViewOpacity:'>
<arg name='centerViewOpacity' type='f' declared_type='CGFloat' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setCenterhiddenInteractivity:'>
<arg name='centerhiddenInteractivity' type='L' declared_type='IIViewDeckCenterHiddenInteractivity' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setCloseSlideAnimationDuration:'>
<arg name='closeSlideAnimationDuration' type='f' declared_type='CGFloat' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setDelegate:'>
<arg name='delegate' type='@' declared_type='id' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setDelegateMode:'>
<arg name='delegateMode' type='L' declared_type='IIViewDeckDelegateMode' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setElastic:'>
<arg name='elastic' type='B' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setEnabled:'>
<arg name='enabled' type='B' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setLeftController:'>
<arg name='leftController' type='@' declared_type='UIViewController*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setLeftSize:'>
<arg name='leftSize' type='f' declared_type='CGFloat' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setLeftSize:completion:'>
<arg name='leftSize' type='f' declared_type='CGFloat' index='0'/>
<arg name='completion' type='@?' declared_type='void (^)(BOOL)' index='1' function_pointer='true'>
<arg type='B' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
<method selector='setMaxSize:'>
<arg name='maxSize' type='f' declared_type='CGFloat' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setMaxSize:completion:'>
<arg name='maxSize' type='f' declared_type='CGFloat' index='0'/>
<arg name='completion' type='@?' declared_type='void (^)(BOOL)' index='1' function_pointer='true'>
<arg type='B' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
<method selector='setNavigationControllerBehavior:'>
<arg name='navigationControllerBehavior' type='L' declared_type='IIViewDeckNavigationControllerBehavior' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setOpenSlideAnimationDuration:'>
<arg name='openSlideAnimationDuration' type='f' declared_type='CGFloat' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setPanningCancelsTouchesInView:'>
<arg name='panningCancelsTouchesInView' type='B' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setPanningGestureDelegate:'>
<arg name='panningGestureDelegate' type='@' declared_type='id' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setPanningMode:'>
<arg name='panningMode' type='L' declared_type='IIViewDeckPanningMode' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setPanningView:'>
<arg name='panningView' type='@' declared_type='UIView*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setParallaxAmount:'>
<arg name='parallaxAmount' type='f' declared_type='CGFloat' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setResizesCenterView:'>
<arg name='resizesCenterView' type='B' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setRightController:'>
<arg name='rightController' type='@' declared_type='UIViewController*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setRightSize:'>
<arg name='rightSize' type='f' declared_type='CGFloat' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setRightSize:completion:'>
<arg name='rightSize' type='f' declared_type='CGFloat' index='0'/>
<arg name='completion' type='@?' declared_type='void (^)(BOOL)' index='1' function_pointer='true'>
<arg type='B' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
<method selector='setShadowEnabled:'>
<arg name='shadowEnabled' type='B' declared_type='BOOL' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setSizeMode:'>
<arg name='sizeMode' type='L' declared_type='IIViewDeckSizeMode' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setTopController:'>
<arg name='topController' type='@' declared_type='UIViewController*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setTopSize:'>
<arg name='topSize' type='f' declared_type='CGFloat' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setTopSize:completion:'>
<arg name='leftSize' type='f' declared_type='CGFloat' index='0'/>
<arg name='completion' type='@?' declared_type='void (^)(BOOL)' index='1' function_pointer='true'>
<arg type='B' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
<method selector='shadowEnabled'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='sideForController:'>
<arg name='controller' type='@' declared_type='UIViewController*' index='0'/>
<retval type='L' declared_type='IIViewDeckSide'/>
</method>
<method selector='sizeMode'>
<retval type='L' declared_type='IIViewDeckSizeMode'/>
</method>
<method selector='slidingController'>
<retval type='@' declared_type='UIViewController*'/>
</method>
<method selector='statusBarHeight'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='toggleBottomView'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='toggleBottomViewAnimated:'>
<arg name='animated' type='B' declared_type='BOOL' index='0'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='toggleBottomViewAnimated:completion:'>
<arg name='animated' type='B' declared_type='BOOL' index='0'/>
<arg name='completed' type='@?' declared_type='IIViewDeckControllerBlock' index='1' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<arg type='B' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='toggleLeftView'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='toggleLeftViewAnimated:'>
<arg name='animated' type='B' declared_type='BOOL' index='0'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='toggleLeftViewAnimated:completion:'>
<arg name='animated' type='B' declared_type='BOOL' index='0'/>
<arg name='completed' type='@?' declared_type='IIViewDeckControllerBlock' index='1' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<arg type='B' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='toggleOpenView'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='toggleOpenViewAnimated:'>
<arg name='animated' type='B' declared_type='BOOL' index='0'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='toggleOpenViewAnimated:completion:'>
<arg name='animated' type='B' declared_type='BOOL' index='0'/>
<arg name='completed' type='@?' declared_type='IIViewDeckControllerBlock' index='1' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<arg type='B' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='toggleRightView'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='toggleRightViewAnimated:'>
<arg name='animated' type='B' declared_type='BOOL' index='0'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='toggleRightViewAnimated:completion:'>
<arg name='animated' type='B' declared_type='BOOL' index='0'/>
<arg name='completed' type='@?' declared_type='IIViewDeckControllerBlock' index='1' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<arg type='B' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='toggleTopView'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='toggleTopViewAnimated:'>
<arg name='animated' type='B' declared_type='BOOL' index='0'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='toggleTopViewAnimated:completion:'>
<arg name='animated' type='B' declared_type='BOOL' index='0'/>
<arg name='completed' type='@?' declared_type='IIViewDeckControllerBlock' index='1' function_pointer='true'>
<arg type='@' declared_type='IIViewDeckController*'/>
<arg type='B' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='topController'>
<retval type='@' declared_type='UIViewController*'/>
</method>
<method selector='topLedgeSize'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='topSize'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='topViewSize'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='viewClassesWithDisabledPan'>
<retval type='@' declared_type='NSArray*'/>
</method>
</class>
<class name='IIWrapController'>
<method selector='initWithViewController:'>
<arg name='controller' type='@' declared_type='UIViewController*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='onViewDidAppear'>
<retval type='@?' declared_type='void (^)(IIWrapController *, BOOL)' function_pointer='true'>
<arg type='@' declared_type='IIWrapController*'/>
<arg type='B' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</retval>
</method>
<method selector='onViewDidDisappear'>
<retval type='@?' declared_type='void (^)(IIWrapController *, BOOL)' function_pointer='true'>
<arg type='@' declared_type='IIWrapController*'/>
<arg type='B' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</retval>
</method>
<method selector='onViewDidLoad'>
<retval type='@?' declared_type='void (^)(IIWrapController *)' function_pointer='true'>
<arg type='@' declared_type='IIWrapController*'/>
<retval type='v' declared_type='void'/>
</retval>
</method>
<method selector='onViewWillAppear'>
<retval type='@?' declared_type='void (^)(IIWrapController *, BOOL)' function_pointer='true'>
<arg type='@' declared_type='IIWrapController*'/>
<arg type='B' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</retval>
</method>
<method selector='onViewWillDisappear'>
<retval type='@?' declared_type='void (^)(IIWrapController *, BOOL)' function_pointer='true'>
<arg type='@' declared_type='IIWrapController*'/>
<arg type='B' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</retval>
</method>
<method selector='setOnViewDidAppear:'>
<arg name='onViewDidAppear' type='@?' declared_type='void (^)(IIWrapController *, BOOL)' index='0' function_pointer='true'>
<arg type='@' declared_type='IIWrapController*'/>
<arg type='B' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
<method selector='setOnViewDidDisappear:'>
<arg name='onViewDidDisappear' type='@?' declared_type='void (^)(IIWrapController *, BOOL)' index='0' function_pointer='true'>
<arg type='@' declared_type='IIWrapController*'/>
<arg type='B' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
<method selector='setOnViewDidLoad:'>
<arg name='onViewDidLoad' type='@?' declared_type='void (^)(IIWrapController *)' index='0' function_pointer='true'>
<arg type='@' declared_type='IIWrapController*'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
<method selector='setOnViewWillAppear:'>
<arg name='onViewWillAppear' type='@?' declared_type='void (^)(IIWrapController *, BOOL)' index='0' function_pointer='true'>
<arg type='@' declared_type='IIWrapController*'/>
<arg type='B' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
<method selector='setOnViewWillDisappear:'>
<arg name='onViewWillDisappear' type='@?' declared_type='void (^)(IIWrapController *, BOOL)' index='0' function_pointer='true'>
<arg type='@' declared_type='IIWrapController*'/>
<arg type='B' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
<method selector='wrappedController'>
<retval type='@' declared_type='UIViewController*'/>
</method>
</class>
<class name='MKAnnotationView'>
<method selector='cancelCurrentImageLoad'>
<retval type='v' declared_type='void'/>
</method>
<method selector='setImageWithURL:'>
<arg name='url' type='@' declared_type='NSURL*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setImageWithURL:completed:'>
<arg name='url' type='@' declared_type='NSURL*' index='0'/>
<arg name='completedBlock' type='@?' declared_type='SDWebImageCompletedBlock' index='1' function_pointer='true'>
<arg type='@' declared_type='UIImage*'/>
<arg type='@' declared_type='NSError*'/>
<arg type='i' declared_type='SDImageCacheType'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
<method selector='setImageWithURL:placeholderImage:'>
<arg name='url' type='@' declared_type='NSURL*' index='0'/>
<arg name='placeholder' type='@' declared_type='UIImage*' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setImageWithURL:placeholderImage:completed:'>
<arg name='url' type='@' declared_type='NSURL*' index='0'/>
<arg name='placeholder' type='@' declared_type='UIImage*' index='1'/>
<arg name='completedBlock' type='@?' declared_type='SDWebImageCompletedBlock' index='2' function_pointer='true'>
<arg type='@' declared_type='UIImage*'/>
<arg type='@' declared_type='NSError*'/>
<arg type='i' declared_type='SDImageCacheType'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
<method selector='setImageWithURL:placeholderImage:options:'>
<arg name='url' type='@' declared_type='NSURL*' index='0'/>
<arg name='placeholder' type='@' declared_type='UIImage*' index='1'/>
<arg name='options' type='i' declared_type='SDWebImageOptions' index='2'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setImageWithURL:placeholderImage:options:completed:'>
<arg name='url' type='@' declared_type='NSURL*' index='0'/>
<arg name='placeholder' type='@' declared_type='UIImage*' index='1'/>
<arg name='options' type='i' declared_type='SDWebImageOptions' index='2'/>
<arg name='completedBlock' type='@?' declared_type='SDWebImageCompletedBlock' index='3' function_pointer='true'>
<arg type='@' declared_type='UIImage*'/>
<arg type='@' declared_type='NSError*'/>
<arg type='i' declared_type='SDImageCacheType'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='NSData'>
<method selector='MD5Digest'>
<retval type='@' declared_type='NSData*'/>
</method>
<method selector='MD5Digest:' class_method='true'>
<arg name='input' type='@' declared_type='NSData*' index='0'/>
<retval type='@' declared_type='NSData*'/>
</method>
<method selector='MD5HexDigest'>
<retval type='@' declared_type='NSString*'/>
</method>
<method selector='MD5HexDigest:' class_method='true'>
<arg name='input' type='@' declared_type='NSData*' index='0'/>
<retval type='@' declared_type='NSString*'/>
</method>
<method selector='sd_isGIF'>
<retval type='B' declared_type='BOOL'/>
</method>
</class>
<class name='NSObject'>
<method selector='cancel'>
<retval type='v' declared_type='void'/>
</method>
<method selector='imageManager:shouldDownloadImageForURL:'>
<arg name='imageManager' type='@' declared_type='SDWebImageManager*' index='0'/>
<arg name='imageURL' type='@' declared_type='NSURL*' index='1'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='imageManager:transformDownloadedImage:withURL:'>
<arg name='imageManager' type='@' declared_type='SDWebImageManager*' index='0'/>
<arg name='image' type='@' declared_type='UIImage*' index='1'/>
<arg name='imageURL' type='@' declared_type='NSURL*' index='2'/>
<retval type='@' declared_type='UIImage*'/>
</method>
<method selector='viewDeckController:applyShadow:withBounds:'>
<arg name='viewDeckController' type='@' declared_type='IIViewDeckController*' index='0'/>
<arg name='shadowLayer' type='@' declared_type='CALayer*' index='1'/>
<arg name='rect' type='{CGRect={CGPoint=ff}{CGSize=ff}}' declared_type='CGRect' index='2'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='viewDeckController:changesLedge:forSide:'>
<arg name='viewDeckController' type='@' declared_type='IIViewDeckController*' index='0'/>
<arg name='ledge' type='f' declared_type='CGFloat' index='1'/>
<arg name='viewDeckSide' type='L' declared_type='IIViewDeckSide' index='2'/>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='viewDeckController:didBounceViewSide:closingController:'>
<arg name='viewDeckController' type='@' declared_type='IIViewDeckController*' index='0'/>
<arg name='viewDeckSide' type='L' declared_type='IIViewDeckSide' index='1'/>
<arg name='closingController' type='@' declared_type='UIViewController*' index='2'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='viewDeckController:didBounceViewSide:openingController:'>
<arg name='viewDeckController' type='@' declared_type='IIViewDeckController*' index='0'/>
<arg name='viewDeckSide' type='L' declared_type='IIViewDeckSide' index='1'/>
<arg name='openingController' type='@' declared_type='UIViewController*' index='2'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='viewDeckController:didChangeOffset:orientation:panning:'>
<arg name='viewDeckController' type='@' declared_type='IIViewDeckController*' index='0'/>
<arg name='offset' type='f' declared_type='CGFloat' index='1'/>
<arg name='orientation' type='L' declared_type='IIViewDeckOffsetOrientation' index='2'/>
<arg name='panning' type='B' declared_type='BOOL' index='3'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='viewDeckController:didCloseViewSide:animated:'>
<arg name='viewDeckController' type='@' declared_type='IIViewDeckController*' index='0'/>
<arg name='viewDeckSide' type='L' declared_type='IIViewDeckSide' index='1'/>
<arg name='animated' type='B' declared_type='BOOL' index='2'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='viewDeckController:didOpenViewSide:animated:'>
<arg name='viewDeckController' type='@' declared_type='IIViewDeckController*' index='0'/>
<arg name='viewDeckSide' type='L' declared_type='IIViewDeckSide' index='1'/>
<arg name='animated' type='B' declared_type='BOOL' index='2'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='viewDeckController:didPreviewBounceViewSide:animated:'>
<arg name='viewDeckController' type='@' declared_type='IIViewDeckController*' index='0'/>
<arg name='viewDeckSide' type='L' declared_type='IIViewDeckSide' index='1'/>
<arg name='animated' type='B' declared_type='BOOL' index='2'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='viewDeckController:didShowCenterViewFromSide:animated:'>
<arg name='viewDeckController' type='@' declared_type='IIViewDeckController*' index='0'/>
<arg name='viewDeckSide' type='L' declared_type='IIViewDeckSide' index='1'/>
<arg name='animated' type='B' declared_type='BOOL' index='2'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='viewDeckController:shouldBeginPanOverView:'>
<arg name='viewDeckController' type='@' declared_type='IIViewDeckController*' index='0'/>
<arg name='view' type='@' declared_type='UIView*' index='1'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='viewDeckController:shouldCloseViewSide:animated:'>
<arg name='viewDeckController' type='@' declared_type='IIViewDeckController*' index='0'/>
<arg name='viewDeckSide' type='L' declared_type='IIViewDeckSide' index='1'/>
<arg name='animated' type='B' declared_type='BOOL' index='2'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='viewDeckController:shouldOpenViewSide:'>
<arg name='viewDeckController' type='@' declared_type='IIViewDeckController*' index='0'/>
<arg name='viewDeckSide' type='L' declared_type='IIViewDeckSide' index='1'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='viewDeckController:shouldPan:'>
<arg name='viewDeckController' type='@' declared_type='IIViewDeckController*' index='0'/>
<arg name='panGestureRecognizer' type='@' declared_type='UIPanGestureRecognizer*' index='1'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='viewDeckController:shouldPreviewBounceViewSide:'>
<arg name='viewDeckController' type='@' declared_type='IIViewDeckController*' index='0'/>
<arg name='viewDeckSide' type='L' declared_type='IIViewDeckSide' index='1'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='viewDeckController:willCloseViewSide:animated:'>
<arg name='viewDeckController' type='@' declared_type='IIViewDeckController*' index='0'/>
<arg name='viewDeckSide' type='L' declared_type='IIViewDeckSide' index='1'/>
<arg name='animated' type='B' declared_type='BOOL' index='2'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='viewDeckController:willOpenViewSide:animated:'>
<arg name='viewDeckController' type='@' declared_type='IIViewDeckController*' index='0'/>
<arg name='viewDeckSide' type='L' declared_type='IIViewDeckSide' index='1'/>
<arg name='animated' type='B' declared_type='BOOL' index='2'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='viewDeckController:willPreviewBounceViewSide:animated:'>
<arg name='viewDeckController' type='@' declared_type='IIViewDeckController*' index='0'/>
<arg name='viewDeckSide' type='L' declared_type='IIViewDeckSide' index='1'/>
<arg name='animated' type='B' declared_type='BOOL' index='2'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='SDImageCache'>
<method selector='addReadOnlyCachePath:'>
<arg name='path' type='@' declared_type='NSString*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='cleanDisk'>
<retval type='v' declared_type='void'/>
</method>
<method selector='clearDisk'>
<retval type='v' declared_type='void'/>
</method>
<method selector='clearMemory'>
<retval type='v' declared_type='void'/>
</method>
<method selector='getDiskCount'>
<retval type='i' declared_type='int'/>
</method>
<method selector='getSize'>
<retval type='Q' declared_type='unsigned long long'/>
</method>
<method selector='imageFromDiskCacheForKey:'>
<arg name='key' type='@' declared_type='NSString*' index='0'/>
<retval type='@' declared_type='UIImage*'/>
</method>
<method selector='imageFromMemoryCacheForKey:'>
<arg name='key' type='@' declared_type='NSString*' index='0'/>
<retval type='@' declared_type='UIImage*'/>
</method>
<method selector='initWithNamespace:'>
<arg name='ns' type='@' declared_type='NSString*' index='0'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='maxCacheAge'>
<retval type='i' declared_type='NSInteger'/>
</method>
<method selector='maxCacheSize'>
<retval type='Q' declared_type='unsigned long long'/>
</method>
<method selector='queryDiskCacheForKey:done:'>
<arg name='key' type='@' declared_type='NSString*' index='0'/>
<arg name='doneBlock' type='@?' declared_type='void (^)(UIImage *, SDImageCacheType)' index='1' function_pointer='true'>
<arg type='@' declared_type='UIImage*'/>
<arg type='i' declared_type='SDImageCacheType'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
<method selector='removeImageForKey:'>
<arg name='key' type='@' declared_type='NSString*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='removeImageForKey:fromDisk:'>
<arg name='key' type='@' declared_type='NSString*' index='0'/>
<arg name='fromDisk' type='B' declared_type='BOOL' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setMaxCacheAge:'>
<arg name='maxCacheAge' type='i' declared_type='NSInteger' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setMaxCacheSize:'>
<arg name='maxCacheSize' type='Q' declared_type='unsigned long long' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='sharedImageCache' class_method='true'>
<retval type='@' declared_type='SDImageCache*'/>
</method>
<method selector='storeImage:forKey:'>
<arg name='image' type='@' declared_type='UIImage*' index='0'/>
<arg name='key' type='@' declared_type='NSString*' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='storeImage:forKey:toDisk:'>
<arg name='image' type='@' declared_type='UIImage*' index='0'/>
<arg name='key' type='@' declared_type='NSString*' index='1'/>
<arg name='toDisk' type='B' declared_type='BOOL' index='2'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='storeImage:imageData:forKey:toDisk:'>
<arg name='image' type='@' declared_type='UIImage*' index='0'/>
<arg name='data' type='@' declared_type='NSData*' index='1'/>
<arg name='key' type='@' declared_type='NSString*' index='2'/>
<arg name='toDisk' type='B' declared_type='BOOL' index='3'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='SDWebImageDownloader'>
<method selector='downloadImageWithURL:options:progress:completed:'>
<arg name='url' type='@' declared_type='NSURL*' index='0'/>
<arg name='options' type='i' declared_type='SDWebImageDownloaderOptions' index='1'/>
<arg name='progressBlock' type='@?' declared_type='SDWebImageDownloaderProgressBlock' index='2' function_pointer='true'>
<arg type='I' declared_type='NSUInteger'/>
<arg type='q' declared_type='long long'/>
<retval type='v' declared_type='void'/>
</arg>
<arg name='completedBlock' type='@?' declared_type='SDWebImageDownloaderCompletedBlock' index='3' function_pointer='true'>
<arg type='@' declared_type='UIImage*'/>
<arg type='@' declared_type='NSData*'/>
<arg type='@' declared_type='NSError*'/>
<arg type='B' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='@' declared_type='id'/>
</method>
<method selector='executionOrder'>
<retval type='i' declared_type='SDWebImageDownloaderExecutionOrder'/>
</method>
<method selector='maxConcurrentDownloads'>
<retval type='i' declared_type='NSInteger'/>
</method>
<method selector='setExecutionOrder:'>
<arg name='executionOrder' type='i' declared_type='SDWebImageDownloaderExecutionOrder' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setMaxConcurrentDownloads:'>
<arg name='maxConcurrentDownloads' type='i' declared_type='NSInteger' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setValue:forHTTPHeaderField:'>
<arg name='value' type='@' declared_type='NSString*' index='0'/>
<arg name='field' type='@' declared_type='NSString*' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='sharedDownloader' class_method='true'>
<retval type='@' declared_type='SDWebImageDownloader*'/>
</method>
<method selector='valueForHTTPHeaderField:'>
<arg name='field' type='@' declared_type='NSString*' index='0'/>
<retval type='@' declared_type='NSString*'/>
</method>
</class>
<class name='SDWebImageDownloaderOperation'>
<method selector='initWithRequest:options:progress:completed:cancelled:'>
<arg name='request' type='@' declared_type='NSURLRequest*' index='0'/>
<arg name='options' type='i' declared_type='SDWebImageDownloaderOptions' index='1'/>
<arg name='progressBlock' type='@?' declared_type='SDWebImageDownloaderProgressBlock' index='2' function_pointer='true'>
<arg type='I' declared_type='NSUInteger'/>
<arg type='q' declared_type='long long'/>
<retval type='v' declared_type='void'/>
</arg>
<arg name='completedBlock' type='@?' declared_type='SDWebImageDownloaderCompletedBlock' index='3' function_pointer='true'>
<arg type='@' declared_type='UIImage*'/>
<arg type='@' declared_type='NSData*'/>
<arg type='@' declared_type='NSError*'/>
<arg type='B' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</arg>
<arg name='cancelBlock' type='@?' declared_type='void (^)()' index='4' function_pointer='true'>
<retval type='v' declared_type='void'/>
</arg>
<retval type='@' declared_type='id'/>
</method>
<method selector='options'>
<retval type='i' declared_type='SDWebImageDownloaderOptions'/>
</method>
<method selector='request'>
<retval type='@' declared_type='NSURLRequest*'/>
</method>
<method selector='setRequest:'>
<arg name='request' type='@' declared_type='NSURLRequest*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='SDWebImageManager'>
<method selector='cacheKeyFilter'>
<retval type='@?' declared_type='NSString *(^)(NSURL *)' function_pointer='true'>
<arg type='@' declared_type='NSURL*'/>
<retval type='@' declared_type='NSString*'/>
</retval>
</method>
<method selector='cancelAll'>
<retval type='v' declared_type='void'/>
</method>
<method selector='delegate'>
<retval type='@' declared_type='id'/>
</method>
<method selector='downloadWithURL:options:progress:completed:'>
<arg name='url' type='@' declared_type='NSURL*' index='0'/>
<arg name='options' type='i' declared_type='SDWebImageOptions' index='1'/>
<arg name='progressBlock' type='@?' declared_type='SDWebImageDownloaderProgressBlock' index='2' function_pointer='true'>
<arg type='I' declared_type='NSUInteger'/>
<arg type='q' declared_type='long long'/>
<retval type='v' declared_type='void'/>
</arg>
<arg name='completedBlock' type='@?' declared_type='SDWebImageCompletedWithFinishedBlock' index='3' function_pointer='true'>
<arg type='@' declared_type='UIImage*'/>
<arg type='@' declared_type='NSError*'/>
<arg type='i' declared_type='SDImageCacheType'/>
<arg type='B' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='@' declared_type='id'/>
</method>
<method selector='imageCache'>
<retval type='@' declared_type='SDImageCache*'/>
</method>
<method selector='imageDownloader'>
<retval type='@' declared_type='SDWebImageDownloader*'/>
</method>
<method selector='isRunning'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='setCacheKeyFilter:'>
<arg name='cacheKeyFilter' type='@?' declared_type='NSString *(^)(NSURL *)' index='0' function_pointer='true'>
<arg type='@' declared_type='NSURL*'/>
<retval type='@' declared_type='NSString*'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
<method selector='setDelegate:'>
<arg name='delegate' type='@' declared_type='id' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setImageCache:'>
<arg name='imageCache' type='@' declared_type='SDImageCache*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setImageDownloader:'>
<arg name='imageDownloader' type='@' declared_type='SDWebImageDownloader*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='sharedManager' class_method='true'>
<retval type='@' declared_type='SDWebImageManager*'/>
</method>
</class>
<class name='SDWebImagePrefetcher'>
<method selector='cancelPrefetching'>
<retval type='v' declared_type='void'/>
</method>
<method selector='maxConcurrentDownloads'>
<retval type='I' declared_type='NSUInteger'/>
</method>
<method selector='options'>
<retval type='i' declared_type='SDWebImageOptions'/>
</method>
<method selector='prefetchURLs:'>
<arg name='urls' type='@' declared_type='NSArray*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='prefetchURLs:completed:'>
<arg name='urls' type='@' declared_type='NSArray*' index='0'/>
<arg name='completionBlock' type='@?' declared_type='void (^)(NSUInteger, NSUInteger)' index='1' function_pointer='true'>
<arg type='I' declared_type='NSUInteger'/>
<arg type='I' declared_type='NSUInteger'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
<method selector='setMaxConcurrentDownloads:'>
<arg name='maxConcurrentDownloads' type='I' declared_type='NSUInteger' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setOptions:'>
<arg name='options' type='i' declared_type='SDWebImageOptions' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='sharedImagePrefetcher' class_method='true'>
<retval type='@' declared_type='SDWebImagePrefetcher*'/>
</method>
</class>
<class name='UIButton'>
<method selector='cancelCurrentImageLoad'>
<retval type='v' declared_type='void'/>
</method>
<method selector='setBackgroundImageWithURL:forState:'>
<arg name='url' type='@' declared_type='NSURL*' index='0'/>
<arg name='state' type='I' declared_type='UIControlState' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setBackgroundImageWithURL:forState:completed:'>
<arg name='url' type='@' declared_type='NSURL*' index='0'/>
<arg name='state' type='I' declared_type='UIControlState' index='1'/>
<arg name='completedBlock' type='@?' declared_type='SDWebImageCompletedBlock' index='2' function_pointer='true'>
<arg type='@' declared_type='UIImage*'/>
<arg type='@' declared_type='NSError*'/>
<arg type='i' declared_type='SDImageCacheType'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
<method selector='setBackgroundImageWithURL:forState:placeholderImage:'>
<arg name='url' type='@' declared_type='NSURL*' index='0'/>
<arg name='state' type='I' declared_type='UIControlState' index='1'/>
<arg name='placeholder' type='@' declared_type='UIImage*' index='2'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setBackgroundImageWithURL:forState:placeholderImage:completed:'>
<arg name='url' type='@' declared_type='NSURL*' index='0'/>
<arg name='state' type='I' declared_type='UIControlState' index='1'/>
<arg name='placeholder' type='@' declared_type='UIImage*' index='2'/>
<arg name='completedBlock' type='@?' declared_type='SDWebImageCompletedBlock' index='3' function_pointer='true'>
<arg type='@' declared_type='UIImage*'/>
<arg type='@' declared_type='NSError*'/>
<arg type='i' declared_type='SDImageCacheType'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
<method selector='setBackgroundImageWithURL:forState:placeholderImage:options:'>
<arg name='url' type='@' declared_type='NSURL*' index='0'/>
<arg name='state' type='I' declared_type='UIControlState' index='1'/>
<arg name='placeholder' type='@' declared_type='UIImage*' index='2'/>
<arg name='options' type='i' declared_type='SDWebImageOptions' index='3'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setBackgroundImageWithURL:forState:placeholderImage:options:completed:'>
<arg name='url' type='@' declared_type='NSURL*' index='0'/>
<arg name='state' type='I' declared_type='UIControlState' index='1'/>
<arg name='placeholder' type='@' declared_type='UIImage*' index='2'/>
<arg name='options' type='i' declared_type='SDWebImageOptions' index='3'/>
<arg name='completedBlock' type='@?' declared_type='SDWebImageCompletedBlock' index='4' function_pointer='true'>
<arg type='@' declared_type='UIImage*'/>
<arg type='@' declared_type='NSError*'/>
<arg type='i' declared_type='SDImageCacheType'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
<method selector='setImageWithURL:forState:'>
<arg name='url' type='@' declared_type='NSURL*' index='0'/>
<arg name='state' type='I' declared_type='UIControlState' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setImageWithURL:forState:completed:'>
<arg name='url' type='@' declared_type='NSURL*' index='0'/>
<arg name='state' type='I' declared_type='UIControlState' index='1'/>
<arg name='completedBlock' type='@?' declared_type='SDWebImageCompletedBlock' index='2' function_pointer='true'>
<arg type='@' declared_type='UIImage*'/>
<arg type='@' declared_type='NSError*'/>
<arg type='i' declared_type='SDImageCacheType'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
<method selector='setImageWithURL:forState:placeholderImage:'>
<arg name='url' type='@' declared_type='NSURL*' index='0'/>
<arg name='state' type='I' declared_type='UIControlState' index='1'/>
<arg name='placeholder' type='@' declared_type='UIImage*' index='2'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setImageWithURL:forState:placeholderImage:completed:'>
<arg name='url' type='@' declared_type='NSURL*' index='0'/>
<arg name='state' type='I' declared_type='UIControlState' index='1'/>
<arg name='placeholder' type='@' declared_type='UIImage*' index='2'/>
<arg name='completedBlock' type='@?' declared_type='SDWebImageCompletedBlock' index='3' function_pointer='true'>
<arg type='@' declared_type='UIImage*'/>
<arg type='@' declared_type='NSError*'/>
<arg type='i' declared_type='SDImageCacheType'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
<method selector='setImageWithURL:forState:placeholderImage:options:'>
<arg name='url' type='@' declared_type='NSURL*' index='0'/>
<arg name='state' type='I' declared_type='UIControlState' index='1'/>
<arg name='placeholder' type='@' declared_type='UIImage*' index='2'/>
<arg name='options' type='i' declared_type='SDWebImageOptions' index='3'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setImageWithURL:forState:placeholderImage:options:completed:'>
<arg name='url' type='@' declared_type='NSURL*' index='0'/>
<arg name='state' type='I' declared_type='UIControlState' index='1'/>
<arg name='placeholder' type='@' declared_type='UIImage*' index='2'/>
<arg name='options' type='i' declared_type='SDWebImageOptions' index='3'/>
<arg name='completedBlock' type='@?' declared_type='SDWebImageCompletedBlock' index='4' function_pointer='true'>
<arg type='@' declared_type='UIImage*'/>
<arg type='@' declared_type='NSError*'/>
<arg type='i' declared_type='SDImageCacheType'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='UIImage'>
<method selector='decodedImageWithImage:' class_method='true'>
<arg name='image' type='@' declared_type='UIImage*' index='0'/>
<retval type='@' declared_type='UIImage*'/>
</method>
<method selector='sd_animatedGIFNamed:' class_method='true'>
<arg name='name' type='@' declared_type='NSString*' index='0'/>
<retval type='@' declared_type='UIImage*'/>
</method>
<method selector='sd_animatedGIFWithData:' class_method='true'>
<arg name='data' type='@' declared_type='NSData*' index='0'/>
<retval type='@' declared_type='UIImage*'/>
</method>
<method selector='sd_animatedImageByScalingAndCroppingToSize:'>
<arg name='size' type='{CGSize=ff}' declared_type='CGSize' index='0'/>
<retval type='@' declared_type='UIImage*'/>
</method>
<method selector='sd_imageWithData:' class_method='true'>
<arg name='data' type='@' declared_type='NSData*' index='0'/>
<retval type='@' declared_type='UIImage*'/>
</method>
</class>
<class name='UIImageView'>
<method selector='cancelCurrentImageLoad'>
<retval type='v' declared_type='void'/>
</method>
<method selector='setImageWithURL:'>
<arg name='url' type='@' declared_type='NSURL*' index='0'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setImageWithURL:completed:'>
<arg name='url' type='@' declared_type='NSURL*' index='0'/>
<arg name='completedBlock' type='@?' declared_type='SDWebImageCompletedBlock' index='1' function_pointer='true'>
<arg type='@' declared_type='UIImage*'/>
<arg type='@' declared_type='NSError*'/>
<arg type='i' declared_type='SDImageCacheType'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
<method selector='setImageWithURL:placeholderImage:'>
<arg name='url' type='@' declared_type='NSURL*' index='0'/>
<arg name='placeholder' type='@' declared_type='UIImage*' index='1'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setImageWithURL:placeholderImage:completed:'>
<arg name='url' type='@' declared_type='NSURL*' index='0'/>
<arg name='placeholder' type='@' declared_type='UIImage*' index='1'/>
<arg name='completedBlock' type='@?' declared_type='SDWebImageCompletedBlock' index='2' function_pointer='true'>
<arg type='@' declared_type='UIImage*'/>
<arg type='@' declared_type='NSError*'/>
<arg type='i' declared_type='SDImageCacheType'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
<method selector='setImageWithURL:placeholderImage:options:'>
<arg name='url' type='@' declared_type='NSURL*' index='0'/>
<arg name='placeholder' type='@' declared_type='UIImage*' index='1'/>
<arg name='options' type='i' declared_type='SDWebImageOptions' index='2'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setImageWithURL:placeholderImage:options:completed:'>
<arg name='url' type='@' declared_type='NSURL*' index='0'/>
<arg name='placeholder' type='@' declared_type='UIImage*' index='1'/>
<arg name='options' type='i' declared_type='SDWebImageOptions' index='2'/>
<arg name='completedBlock' type='@?' declared_type='SDWebImageCompletedBlock' index='3' function_pointer='true'>
<arg type='@' declared_type='UIImage*'/>
<arg type='@' declared_type='NSError*'/>
<arg type='i' declared_type='SDImageCacheType'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
<method selector='setImageWithURL:placeholderImage:options:progress:completed:'>
<arg name='url' type='@' declared_type='NSURL*' index='0'/>
<arg name='placeholder' type='@' declared_type='UIImage*' index='1'/>
<arg name='options' type='i' declared_type='SDWebImageOptions' index='2'/>
<arg name='progressBlock' type='@?' declared_type='SDWebImageDownloaderProgressBlock' index='3' function_pointer='true'>
<arg type='I' declared_type='NSUInteger'/>
<arg type='q' declared_type='long long'/>
<retval type='v' declared_type='void'/>
</arg>
<arg name='completedBlock' type='@?' declared_type='SDWebImageCompletedBlock' index='4' function_pointer='true'>
<arg type='@' declared_type='UIImage*'/>
<arg type='@' declared_type='NSError*'/>
<arg type='i' declared_type='SDImageCacheType'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='UIViewController'>
<method selector='sideController'>
<retval type='@' declared_type='IISideController*'/>
</method>
<method selector='viewDeckController'>
<retval type='@' declared_type='IIViewDeckController*'/>
</method>
<method selector='wrapController'>
<retval type='@' declared_type='IIWrapController*'/>
</method>
</class>
<informal_protocol name='IIViewDeckControllerDelegate'>
<method selector='viewDeckController:applyShadow:withBounds:' type='v32@0:4@8@12{CGRect={CGPoint=ff}{CGSize=ff}}16'>
<arg name='viewDeckController' type='@' declared_type='IIViewDeckController*' index='0'/>
<arg name='shadowLayer' type='@' declared_type='CALayer*' index='1'/>
<arg name='rect' type='{CGRect={CGPoint=ff}{CGSize=ff}}' declared_type='CGRect' index='2'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='viewDeckController:changesLedge:forSide:' type='f20@0:4@8f12L16'>
<arg name='viewDeckController' type='@' declared_type='IIViewDeckController*' index='0'/>
<arg name='ledge' type='f' declared_type='CGFloat' index='1'/>
<arg name='viewDeckSide' type='L' declared_type='IIViewDeckSide' index='2'/>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='viewDeckController:didBounceViewSide:closingController:' type='v20@0:4@8L12@16'>
<arg name='viewDeckController' type='@' declared_type='IIViewDeckController*' index='0'/>
<arg name='viewDeckSide' type='L' declared_type='IIViewDeckSide' index='1'/>
<arg name='closingController' type='@' declared_type='UIViewController*' index='2'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='viewDeckController:didBounceViewSide:openingController:' type='v20@0:4@8L12@16'>
<arg name='viewDeckController' type='@' declared_type='IIViewDeckController*' index='0'/>
<arg name='viewDeckSide' type='L' declared_type='IIViewDeckSide' index='1'/>
<arg name='openingController' type='@' declared_type='UIViewController*' index='2'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='viewDeckController:didChangeOffset:orientation:panning:' type='v24@0:4@8f12L16B20'>
<arg name='viewDeckController' type='@' declared_type='IIViewDeckController*' index='0'/>
<arg name='offset' type='f' declared_type='CGFloat' index='1'/>
<arg name='orientation' type='L' declared_type='IIViewDeckOffsetOrientation' index='2'/>
<arg name='panning' type='B' declared_type='BOOL' index='3'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='viewDeckController:didCloseViewSide:animated:' type='v20@0:4@8L12B16'>
<arg name='viewDeckController' type='@' declared_type='IIViewDeckController*' index='0'/>
<arg name='viewDeckSide' type='L' declared_type='IIViewDeckSide' index='1'/>
<arg name='animated' type='B' declared_type='BOOL' index='2'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='viewDeckController:didOpenViewSide:animated:' type='v20@0:4@8L12B16'>
<arg name='viewDeckController' type='@' declared_type='IIViewDeckController*' index='0'/>
<arg name='viewDeckSide' type='L' declared_type='IIViewDeckSide' index='1'/>
<arg name='animated' type='B' declared_type='BOOL' index='2'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='viewDeckController:didPreviewBounceViewSide:animated:' type='v20@0:4@8L12B16'>
<arg name='viewDeckController' type='@' declared_type='IIViewDeckController*' index='0'/>
<arg name='viewDeckSide' type='L' declared_type='IIViewDeckSide' index='1'/>
<arg name='animated' type='B' declared_type='BOOL' index='2'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='viewDeckController:didShowCenterViewFromSide:animated:' type='v20@0:4@8L12B16'>
<arg name='viewDeckController' type='@' declared_type='IIViewDeckController*' index='0'/>
<arg name='viewDeckSide' type='L' declared_type='IIViewDeckSide' index='1'/>
<arg name='animated' type='B' declared_type='BOOL' index='2'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='viewDeckController:shouldBeginPanOverView:' type='B16@0:4@8@12'>
<arg name='viewDeckController' type='@' declared_type='IIViewDeckController*' index='0'/>
<arg name='view' type='@' declared_type='UIView*' index='1'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='viewDeckController:shouldCloseViewSide:animated:' type='B20@0:4@8L12B16'>
<arg name='viewDeckController' type='@' declared_type='IIViewDeckController*' index='0'/>
<arg name='viewDeckSide' type='L' declared_type='IIViewDeckSide' index='1'/>
<arg name='animated' type='B' declared_type='BOOL' index='2'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='viewDeckController:shouldOpenViewSide:' type='B16@0:4@8L12'>
<arg name='viewDeckController' type='@' declared_type='IIViewDeckController*' index='0'/>
<arg name='viewDeckSide' type='L' declared_type='IIViewDeckSide' index='1'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='viewDeckController:shouldPan:' type='B16@0:4@8@12'>
<arg name='viewDeckController' type='@' declared_type='IIViewDeckController*' index='0'/>
<arg name='panGestureRecognizer' type='@' declared_type='UIPanGestureRecognizer*' index='1'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='viewDeckController:shouldPreviewBounceViewSide:' type='B16@0:4@8L12'>
<arg name='viewDeckController' type='@' declared_type='IIViewDeckController*' index='0'/>
<arg name='viewDeckSide' type='L' declared_type='IIViewDeckSide' index='1'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='viewDeckController:willCloseViewSide:animated:' type='v20@0:4@8L12B16'>
<arg name='viewDeckController' type='@' declared_type='IIViewDeckController*' index='0'/>
<arg name='viewDeckSide' type='L' declared_type='IIViewDeckSide' index='1'/>
<arg name='animated' type='B' declared_type='BOOL' index='2'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='viewDeckController:willOpenViewSide:animated:' type='v20@0:4@8L12B16'>
<arg name='viewDeckController' type='@' declared_type='IIViewDeckController*' index='0'/>
<arg name='viewDeckSide' type='L' declared_type='IIViewDeckSide' index='1'/>
<arg name='animated' type='B' declared_type='BOOL' index='2'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='viewDeckController:willPreviewBounceViewSide:animated:' type='v20@0:4@8L12B16'>
<arg name='viewDeckController' type='@' declared_type='IIViewDeckController*' index='0'/>
<arg name='viewDeckSide' type='L' declared_type='IIViewDeckSide' index='1'/>
<arg name='animated' type='B' declared_type='BOOL' index='2'/>
<retval type='v' declared_type='void'/>
</method>
</informal_protocol>
<informal_protocol name='SDWebImageManagerDelegate'>
<method selector='imageManager:shouldDownloadImageForURL:' type='B16@0:4@8@12'>
<arg name='imageManager' type='@' declared_type='SDWebImageManager*' index='0'/>
<arg name='imageURL' type='@' declared_type='NSURL*' index='1'/>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='imageManager:transformDownloadedImage:withURL:' type='@20@0:4@8@12@16'>
<arg name='imageManager' type='@' declared_type='SDWebImageManager*' index='0'/>
<arg name='image' type='@' declared_type='UIImage*' index='1'/>
<arg name='imageURL' type='@' declared_type='NSURL*' index='2'/>
<retval type='@' declared_type='UIImage*'/>
</method>
</informal_protocol>
<informal_protocol name='SDWebImageOperation'>
<method selector='cancel' type='v8@0:4'>
<retval type='v' declared_type='void'/>
</method>
</informal_protocol>
</signatures>
